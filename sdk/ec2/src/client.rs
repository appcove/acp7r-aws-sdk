// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
            pub(crate) struct Handle {
                pub(crate) client: aws_smithy_client::Client<aws_smithy_client::erase::DynConnector, aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>>,
                pub(crate) conf: crate::Config,
            }

            /// Client for Amazon Elastic Compute Cloud
                    ///
                    /// Client for invoking operations on Amazon Elastic Compute Cloud. Each operation on Amazon Elastic Compute Cloud is a method on this
                    /// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
                        /// # Examples
                        /// **Constructing a client and invoking an operation**
                        /// ```rust,no_run
                        /// # async fn docs() {
                        ///     // create a shared configuration. This can be used & shared between multiple service clients.
                        ///     let shared_config = aws_config::load_from_env().await;
                        ///     let client = aws_sdk_ec2::Client::new(&shared_config);
                        ///     // invoke an operation
                        ///     /* let rsp = client
                        ///         .<operation_name>().
                        ///         .<param>("some value")
                        ///         .send().await; */
                        /// # }
                        /// ```
                        /// **Constructing a client with custom configuration**
                        /// ```rust,no_run
                        /// use aws_config::RetryConfig;
                        /// # async fn docs() {
                        /// let shared_config = aws_config::load_from_env().await;
                        /// let config = aws_sdk_ec2::config::Builder::from(&shared_config)
                        ///   .retry_config(RetryConfig::disabled())
                        ///   .build();
                        /// let client = aws_sdk_ec2::Client::from_conf(config);
                        /// # }
            #[derive(std::fmt::Debug)]
            pub struct Client {
                handle: std::sync::Arc<Handle>
            }

            impl std::clone::Clone for Client {
                fn clone(&self) -> Self {
                    Self { handle: self.handle.clone() }
                }
            }

            #[doc(inline)]
            pub use aws_smithy_client::Builder;

            impl From<aws_smithy_client::Client<aws_smithy_client::erase::DynConnector, aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>>> for Client {
                fn from(client: aws_smithy_client::Client<aws_smithy_client::erase::DynConnector, aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>>) -> Self {
                    Self::with_config(client, crate::Config::builder().build())
                }
            }

            impl Client {
                /// Creates a client with the given service configuration.
                pub fn with_config(client: aws_smithy_client::Client<aws_smithy_client::erase::DynConnector, aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>>, conf: crate::Config) -> Self {
                    Self {
                        handle: std::sync::Arc::new(Handle {
                            client,
                            conf,
                        })
                    }
                }

                /// Returns the client's configuration.
                pub fn conf(&self) -> &crate::Config {
                    &self.handle.conf
                }
            }
impl Client  {
    /// Constructs a fluent builder for the [`CreateTags`](crate::client::fluent_builders::CreateTags) operation.
                        ///
                        /// - The fluent builder is configurable:
                        ///   - [`dry_run(bool)`](crate::client::fluent_builders::CreateTags::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::CreateTags::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`resources(Vec<String>)`](crate::client::fluent_builders::CreateTags::resources) / [`set_resources(Option<Vec<String>>)`](crate::client::fluent_builders::CreateTags::set_resources): <p>The IDs of the resources, separated by spaces.</p>  <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTags::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTags::set_tags): <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
                        /// - On success, responds with [`CreateTagsOutput`](crate::output::CreateTagsOutput)
                        
                        /// - On failure, responds with [`SdkError<CreateTagsError>`](crate::error::CreateTagsError)
    pub fn create_tags(&self) -> fluent_builders::CreateTags {
                            fluent_builders::CreateTags::new(self.handle.clone())
                        }
    /// Constructs a fluent builder for the [`DescribeInstances`](crate::client::fluent_builders::DescribeInstances) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeInstances::into_paginator).
                        ///
                        /// - The fluent builder is configurable:
                        ///   - [`dry_run(bool)`](crate::client::fluent_builders::DescribeInstances::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::DescribeInstances::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::DescribeInstances::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::DescribeInstances::set_filters): <p>The filters.</p>  <ul>   <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li>   <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li>   <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li>   <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li>   <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li>   <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li>   <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li>   <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li>   <li> <p> <code>capacity-reservation-id</code> - The ID of the Capacity Reservation into which the instance was launched.</p> </li>   <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li>   <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li>   <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li>   <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li>   <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li>   <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li>   <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li>   <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li>   <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li>   <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li>   <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li>   <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li>   <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li>   <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li>   <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li>   <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li>   <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li>   <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li>   <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li>   <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li>   <li> <p> <code>launch-time</code> - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an entire day.</p> </li>   <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li>   <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li>   <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li>   <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li>   <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li>   <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li>   <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li>   <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li>   <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li>   <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li>   <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li>   <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li>   <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li>   <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li>   <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li>   <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li>   <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li>   <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li>   <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li>   <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li>   <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li>   <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li>   <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li>   <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li>   <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li>   <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li>   <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li>   <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li>   <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li>   <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by Amazon Web Services.</p> </li>   <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li>   <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li>   <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li>   <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li>   <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li>   <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p> </li>   <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li>   <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li>   <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li>   <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li>   <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li>   <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li>   <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li>   <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li>   <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li>   <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p> </li>   <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li>   <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li>   <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li>   <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li>   <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li>   <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li>   <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li>   <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li>   <li> <p> <code>tag:     <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li>   <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li>   <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li>   <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li>   <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li>  </ul>
    ///   - [`instance_ids(Vec<String>)`](crate::client::fluent_builders::DescribeInstances::instance_ids) / [`set_instance_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeInstances::set_instance_ids): <p>The instance IDs.</p>  <p>Default: Describes all your instances.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeInstances::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeInstances::set_max_results): <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeInstances::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeInstances::set_next_token): <p>The token to request the next page of results.</p>
                        /// - On success, responds with [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput) with field(s):
                        ///   - [`next_token(Option<String>)`](crate::output::DescribeInstancesOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    ///   - [`reservations(Option<Vec<Reservation>>)`](crate::output::DescribeInstancesOutput::reservations): <p>Information about the reservations.</p>
                        /// - On failure, responds with [`SdkError<DescribeInstancesError>`](crate::error::DescribeInstancesError)
    pub fn describe_instances(&self) -> fluent_builders::DescribeInstances {
                            fluent_builders::DescribeInstances::new(self.handle.clone())
                        }
    /// Constructs a fluent builder for the [`RunInstances`](crate::client::fluent_builders::RunInstances) operation.
                        ///
                        /// - The fluent builder is configurable:
                        ///   - [`additional_info(impl Into<String>)`](crate::client::fluent_builders::RunInstances::additional_info) / [`set_additional_info(Option<String>)`](crate::client::fluent_builders::RunInstances::set_additional_info): <p>Reserved.</p>
    ///   - [`block_device_mappings(Vec<BlockDeviceMapping>)`](crate::client::fluent_builders::RunInstances::block_device_mappings) / [`set_block_device_mappings(Option<Vec<BlockDeviceMapping>>)`](crate::client::fluent_builders::RunInstances::set_block_device_mappings): <p>The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>
    ///   - [`capacity_reservation_specification(CapacityReservationSpecification)`](crate::client::fluent_builders::RunInstances::capacity_reservation_specification) / [`set_capacity_reservation_specification(Option<CapacityReservationSpecification>)`](crate::client::fluent_builders::RunInstances::set_capacity_reservation_specification): <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::RunInstances::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::RunInstances::set_client_token): <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>  <p>Constraints: Maximum 64 ASCII characters</p>
    ///   - [`cpu_options(CpuOptionsRequest)`](crate::client::fluent_builders::RunInstances::cpu_options) / [`set_cpu_options(Option<CpuOptionsRequest>)`](crate::client::fluent_builders::RunInstances::set_cpu_options): <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
    ///   - [`credit_specification(CreditSpecificationRequest)`](crate::client::fluent_builders::RunInstances::credit_specification) / [`set_credit_specification(Option<CreditSpecificationRequest>)`](crate::client::fluent_builders::RunInstances::set_credit_specification): <p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>  <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p>  <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is supported.</p>
    ///   - [`disable_api_stop(bool)`](crate::client::fluent_builders::RunInstances::disable_api_stop) / [`set_disable_api_stop(Option<bool>)`](crate::client::fluent_builders::RunInstances::set_disable_api_stop): <p>Indicates whether an instance is enabled for stop protection. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop Protection</a>. </p>
    ///   - [`disable_api_termination(bool)`](crate::client::fluent_builders::RunInstances::disable_api_termination) / [`set_disable_api_termination(Option<bool>)`](crate::client::fluent_builders::RunInstances::set_disable_api_termination): <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p>  <p>Default: <code>false</code> </p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::RunInstances::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::RunInstances::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`ebs_optimized(bool)`](crate::client::fluent_builders::RunInstances::ebs_optimized) / [`set_ebs_optimized(Option<bool>)`](crate::client::fluent_builders::RunInstances::set_ebs_optimized): <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p>  <p>Default: <code>false</code> </p>
    ///   - [`elastic_gpu_specification(Vec<ElasticGpuSpecification>)`](crate::client::fluent_builders::RunInstances::elastic_gpu_specification) / [`set_elastic_gpu_specification(Option<Vec<ElasticGpuSpecification>>)`](crate::client::fluent_builders::RunInstances::set_elastic_gpu_specification): <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    ///   - [`elastic_inference_accelerators(Vec<ElasticInferenceAccelerator>)`](crate::client::fluent_builders::RunInstances::elastic_inference_accelerators) / [`set_elastic_inference_accelerators(Option<Vec<ElasticInferenceAccelerator>>)`](crate::client::fluent_builders::RunInstances::set_elastic_inference_accelerators): <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p>  <p>You cannot specify accelerators from different generations in the same request.</p>
    ///   - [`enclave_options(EnclaveOptionsRequest)`](crate::client::fluent_builders::RunInstances::enclave_options) / [`set_enclave_options(Option<EnclaveOptionsRequest>)`](crate::client::fluent_builders::RunInstances::set_enclave_options): <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html"> What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>  <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
    ///   - [`hibernation_options(HibernationOptionsRequest)`](crate::client::fluent_builders::RunInstances::hibernation_options) / [`set_hibernation_options(Option<HibernationOptionsRequest>)`](crate::client::fluent_builders::RunInstances::set_hibernation_options): <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>  <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
    ///   - [`iam_instance_profile(IamInstanceProfileSpecification)`](crate::client::fluent_builders::RunInstances::iam_instance_profile) / [`set_iam_instance_profile(Option<IamInstanceProfileSpecification>)`](crate::client::fluent_builders::RunInstances::set_iam_instance_profile): <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
    ///   - [`image_id(impl Into<String>)`](crate::client::fluent_builders::RunInstances::image_id) / [`set_image_id(Option<String>)`](crate::client::fluent_builders::RunInstances::set_image_id): <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
    ///   - [`instance_initiated_shutdown_behavior(ShutdownBehavior)`](crate::client::fluent_builders::RunInstances::instance_initiated_shutdown_behavior) / [`set_instance_initiated_shutdown_behavior(Option<ShutdownBehavior>)`](crate::client::fluent_builders::RunInstances::set_instance_initiated_shutdown_behavior): <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>  <p>Default: <code>stop</code> </p>
    ///   - [`instance_market_options(InstanceMarketOptionsRequest)`](crate::client::fluent_builders::RunInstances::instance_market_options) / [`set_instance_market_options(Option<InstanceMarketOptionsRequest>)`](crate::client::fluent_builders::RunInstances::set_instance_market_options): <p>The market (purchasing) option for the instances.</p>  <p>For <code>RunInstances</code>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
    ///   - [`instance_type(InstanceType)`](crate::client::fluent_builders::RunInstances::instance_type) / [`set_instance_type(Option<InstanceType>)`](crate::client::fluent_builders::RunInstances::set_instance_type): <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>  <p>Default: <code>m1.small</code> </p>
    ///   - [`ipv6_address_count(i32)`](crate::client::fluent_builders::RunInstances::ipv6_address_count) / [`set_ipv6_address_count(Option<i32>)`](crate::client::fluent_builders::RunInstances::set_ipv6_address_count): <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p>  <p>You cannot specify this option and the network interfaces option in the same request.</p>
    ///   - [`ipv6_addresses(Vec<InstanceIpv6Address>)`](crate::client::fluent_builders::RunInstances::ipv6_addresses) / [`set_ipv6_addresses(Option<Vec<InstanceIpv6Address>>)`](crate::client::fluent_builders::RunInstances::set_ipv6_addresses): <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p>  <p>You cannot specify this option and the network interfaces option in the same request.</p>
    ///   - [`kernel_id(impl Into<String>)`](crate::client::fluent_builders::RunInstances::kernel_id) / [`set_kernel_id(Option<String>)`](crate::client::fluent_builders::RunInstances::set_kernel_id): <p>The ID of the kernel.</p> <important>   <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p>  </important>
    ///   - [`key_name(impl Into<String>)`](crate::client::fluent_builders::RunInstances::key_name) / [`set_key_name(Option<String>)`](crate::client::fluent_builders::RunInstances::set_key_name): <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important>   <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p>  </important>
    ///   - [`launch_template(LaunchTemplateSpecification)`](crate::client::fluent_builders::RunInstances::launch_template) / [`set_launch_template(Option<LaunchTemplateSpecification>)`](crate::client::fluent_builders::RunInstances::set_launch_template): <p>The launch template to use to launch the instances. Any parameters that you specify in <code>RunInstances</code> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
    ///   - [`license_specifications(Vec<LicenseConfigurationRequest>)`](crate::client::fluent_builders::RunInstances::license_specifications) / [`set_license_specifications(Option<Vec<LicenseConfigurationRequest>>)`](crate::client::fluent_builders::RunInstances::set_license_specifications): <p>The license configurations.</p>
    ///   - [`maintenance_options(InstanceMaintenanceOptionsRequest)`](crate::client::fluent_builders::RunInstances::maintenance_options) / [`set_maintenance_options(Option<InstanceMaintenanceOptionsRequest>)`](crate::client::fluent_builders::RunInstances::set_maintenance_options): <p>The maintenance and recovery options for the instance.</p>
    ///   - [`max_count(i32)`](crate::client::fluent_builders::RunInstances::max_count) / [`set_max_count(Option<i32>)`](crate::client::fluent_builders::RunInstances::set_max_count): <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p>  <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
    ///   - [`metadata_options(InstanceMetadataOptionsRequest)`](crate::client::fluent_builders::RunInstances::metadata_options) / [`set_metadata_options(Option<InstanceMetadataOptionsRequest>)`](crate::client::fluent_builders::RunInstances::set_metadata_options): <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
    ///   - [`min_count(i32)`](crate::client::fluent_builders::RunInstances::min_count) / [`set_min_count(Option<i32>)`](crate::client::fluent_builders::RunInstances::set_min_count): <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p>  <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
    ///   - [`monitoring(RunInstancesMonitoringEnabled)`](crate::client::fluent_builders::RunInstances::monitoring) / [`set_monitoring(Option<RunInstancesMonitoringEnabled>)`](crate::client::fluent_builders::RunInstances::set_monitoring): <p>Specifies whether detailed monitoring is enabled for the instance.</p>
    ///   - [`network_interfaces(Vec<InstanceNetworkInterfaceSpecification>)`](crate::client::fluent_builders::RunInstances::network_interfaces) / [`set_network_interfaces(Option<Vec<InstanceNetworkInterfaceSpecification>>)`](crate::client::fluent_builders::RunInstances::set_network_interfaces): <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</p>
    ///   - [`placement(Placement)`](crate::client::fluent_builders::RunInstances::placement) / [`set_placement(Option<Placement>)`](crate::client::fluent_builders::RunInstances::set_placement): <p>The placement for the instance.</p>
    ///   - [`private_dns_name_options(PrivateDnsNameOptionsRequest)`](crate::client::fluent_builders::RunInstances::private_dns_name_options) / [`set_private_dns_name_options(Option<PrivateDnsNameOptionsRequest>)`](crate::client::fluent_builders::RunInstances::set_private_dns_name_options): <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
    ///   - [`private_ip_address(impl Into<String>)`](crate::client::fluent_builders::RunInstances::private_ip_address) / [`set_private_ip_address(Option<String>)`](crate::client::fluent_builders::RunInstances::set_private_ip_address): <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p>  <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p>  <p>You cannot specify this option and the network interfaces option in the same request.</p>
    ///   - [`ramdisk_id(impl Into<String>)`](crate::client::fluent_builders::RunInstances::ramdisk_id) / [`set_ramdisk_id(Option<String>)`](crate::client::fluent_builders::RunInstances::set_ramdisk_id): <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.</p> <important>   <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p>  </important>
    ///   - [`security_group_ids(Vec<String>)`](crate::client::fluent_builders::RunInstances::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::client::fluent_builders::RunInstances::set_security_group_ids): <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p>  <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
    ///   - [`security_groups(Vec<String>)`](crate::client::fluent_builders::RunInstances::security_groups) / [`set_security_groups(Option<Vec<String>>)`](crate::client::fluent_builders::RunInstances::set_security_groups): <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p>  <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>  <p>Default: Amazon EC2 uses the default security group.</p>
    ///   - [`subnet_id(impl Into<String>)`](crate::client::fluent_builders::RunInstances::subnet_id) / [`set_subnet_id(Option<String>)`](crate::client::fluent_builders::RunInstances::set_subnet_id): <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p>  <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
    ///   - [`tag_specifications(Vec<TagSpecification>)`](crate::client::fluent_builders::RunInstances::tag_specifications) / [`set_tag_specifications(Option<Vec<TagSpecification>>)`](crate::client::fluent_builders::RunInstances::set_tag_specifications): <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
    ///   - [`user_data(impl Into<String>)`](crate::client::fluent_builders::RunInstances::user_data) / [`set_user_data(Option<String>)`](crate::client::fluent_builders::RunInstances::set_user_data): <p>The user data script to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
                        /// - On success, responds with [`RunInstancesOutput`](crate::output::RunInstancesOutput) with field(s):
                        ///   - [`groups(Option<Vec<GroupIdentifier>>)`](crate::output::RunInstancesOutput::groups): <p>[EC2-Classic only] The security groups.</p>
    ///   - [`instances(Option<Vec<Instance>>)`](crate::output::RunInstancesOutput::instances): <p>The instances.</p>
    ///   - [`owner_id(Option<String>)`](crate::output::RunInstancesOutput::owner_id): <p>The ID of the Amazon Web Services account that owns the reservation.</p>
    ///   - [`requester_id(Option<String>)`](crate::output::RunInstancesOutput::requester_id): <p>The ID of the requester that launched the instances on your behalf (for example, Amazon Web Services Management Console or Auto Scaling).</p>
    ///   - [`reservation_id(Option<String>)`](crate::output::RunInstancesOutput::reservation_id): <p>The ID of the reservation.</p>
                        /// - On failure, responds with [`SdkError<RunInstancesError>`](crate::error::RunInstancesError)
    pub fn run_instances(&self) -> fluent_builders::RunInstances {
                            fluent_builders::RunInstances::new(self.handle.clone())
                        }
    /// Constructs a fluent builder for the [`TerminateInstances`](crate::client::fluent_builders::TerminateInstances) operation.
                        ///
                        /// - The fluent builder is configurable:
                        ///   - [`dry_run(bool)`](crate::client::fluent_builders::TerminateInstances::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::TerminateInstances::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`instance_ids(Vec<String>)`](crate::client::fluent_builders::TerminateInstances::instance_ids) / [`set_instance_ids(Option<Vec<String>>)`](crate::client::fluent_builders::TerminateInstances::set_instance_ids): <p>The IDs of the instances.</p>  <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
                        /// - On success, responds with [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput) with field(s):
                        ///   - [`terminating_instances(Option<Vec<InstanceStateChange>>)`](crate::output::TerminateInstancesOutput::terminating_instances): <p>Information about the terminated instances.</p>
                        /// - On failure, responds with [`SdkError<TerminateInstancesError>`](crate::error::TerminateInstancesError)
    pub fn terminate_instances(&self) -> fluent_builders::TerminateInstances {
                            fluent_builders::TerminateInstances::new(self.handle.clone())
                        }
}
pub mod fluent_builders {
    
    //! Utilities to ergonomically construct a request to the service.
    //! 
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    /// Fluent builder constructing a request to `CreateTags`.
                        ///
    /// <p>Adds or overwrites only the specified tags for the specified Amazon EC2 resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.</p> 
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #[derive(std::clone::Clone, std::fmt::Debug, )]
    pub struct CreateTags {
                            handle: std::sync::Arc<super::Handle>,
                            inner: crate::input::create_tags_input::Builder
                        }
    impl CreateTags  {
        /// Creates a new `CreateTags`.
                                pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
                                    Self { handle, inner: Default::default() }
                                }
        
                                /// Sends the request and returns the response.
                                ///
                                /// If an error occurs, an `SdkError` will be returned with additional details that
                                /// can be matched against.
                                ///
                                /// By default, any retryable failures will be retried twice. Retry behavior
                                /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                                /// set when configuring the client.
                                pub async fn send(self) -> std::result::Result<crate::output::CreateTagsOutput, aws_smithy_http::result::SdkError<crate::error::CreateTagsError>>
                                 {
                                    let op = self.inner.build().map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                                        .make_operation(&self.handle.conf)
                                        .await
                                        .map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
                                    self.handle.client.call(op).await
                                }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
        /// Appends an item to `Resources`.
        ///
        /// To override the contents of this collection use [`set_resources`](Self::set_resources).
        ///
        /// <p>The IDs of the resources, separated by spaces.</p> 
        /// <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn resources(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resources(input.into());
            self
        }
        /// <p>The IDs of the resources, separated by spaces.</p> 
        /// <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn set_resources(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.inner = self.inner.set_resources(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
        pub fn set_tags(mut self, input: std::option::Option<std::vec::Vec<crate::model::Tag>>) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeInstances`.
                        ///
    /// <p>Describes the specified instances or all instances.</p> 
    /// <p>If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully.</p> 
    /// <p>If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the output.</p> 
    /// <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> 
    /// <p>If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.</p>
    #[derive(std::clone::Clone, std::fmt::Debug, )]
    pub struct DescribeInstances {
                            handle: std::sync::Arc<super::Handle>,
                            inner: crate::input::describe_instances_input::Builder
                        }
    impl DescribeInstances  {
        /// Creates a new `DescribeInstances`.
                                pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
                                    Self { handle, inner: Default::default() }
                                }
        
                                /// Sends the request and returns the response.
                                ///
                                /// If an error occurs, an `SdkError` will be returned with additional details that
                                /// can be matched against.
                                ///
                                /// By default, any retryable failures will be retried twice. Retry behavior
                                /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                                /// set when configuring the client.
                                pub async fn send(self) -> std::result::Result<crate::output::DescribeInstancesOutput, aws_smithy_http::result::SdkError<crate::error::DescribeInstancesError>>
                                 {
                                    let op = self.inner.build().map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                                        .make_operation(&self.handle.conf)
                                        .await
                                        .map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
                                    self.handle.client.call(op).await
                                }
        /// Create a paginator for this request
                                    ///
                                    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeInstancesPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
                                    pub fn into_paginator(self) -> crate::paginator::DescribeInstancesPaginator {
                                        crate::paginator::DescribeInstancesPaginator::new(self.handle, self.inner)
                                    }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
        /// Appends an item to `Filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>The filters.</p> 
        /// <ul> 
        /// <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> 
        /// <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> 
        /// <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> 
        /// <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> 
        /// <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> 
        /// <li> <p> <code>capacity-reservation-id</code> - The ID of the Capacity Reservation into which the instance was launched.</p> </li> 
        /// <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> 
        /// <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> 
        /// <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> 
        /// <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> 
        /// <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li> 
        /// <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> 
        /// <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> 
        /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> 
        /// <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> 
        /// <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> 
        /// <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> 
        /// <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> 
        /// <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> 
        /// <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> 
        /// <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> 
        /// <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> 
        /// <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> 
        /// <li> <p> <code>launch-time</code> - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an entire day.</p> </li> 
        /// <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> 
        /// <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> 
        /// <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> 
        /// <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by Amazon Web Services.</p> </li> 
        /// <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> 
        /// <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> 
        /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> 
        /// <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> 
        /// <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p> </li> 
        /// <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> 
        /// <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> 
        /// <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> 
        /// <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> 
        /// <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> 
        /// <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> 
        /// <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> 
        /// <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> 
        /// <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p> </li> 
        /// <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> 
        /// <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> 
        /// <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> 
        /// <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> 
        /// <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> 
        /// <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> 
        /// <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> 
        /// <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> 
        /// <li> <p> <code>tag:
        /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> 
        /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> 
        /// <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> 
        /// <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> 
        /// </ul>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>The filters.</p> 
        /// <ul> 
        /// <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> 
        /// <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> 
        /// <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> 
        /// <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> 
        /// <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> 
        /// <li> <p> <code>capacity-reservation-id</code> - The ID of the Capacity Reservation into which the instance was launched.</p> </li> 
        /// <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> 
        /// <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> 
        /// <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> 
        /// <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> 
        /// <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li> 
        /// <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> 
        /// <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> 
        /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> 
        /// <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> 
        /// <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> 
        /// <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> 
        /// <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> 
        /// <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> 
        /// <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> 
        /// <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> 
        /// <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> 
        /// <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> 
        /// <li> <p> <code>launch-time</code> - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an entire day.</p> </li> 
        /// <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> 
        /// <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> 
        /// <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> 
        /// <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by Amazon Web Services.</p> </li> 
        /// <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> 
        /// <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> 
        /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> 
        /// <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> 
        /// <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p> </li> 
        /// <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> 
        /// <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> 
        /// <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> 
        /// <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> 
        /// <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> 
        /// <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> 
        /// <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> 
        /// <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> 
        /// <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p> </li> 
        /// <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> 
        /// <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> 
        /// <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> 
        /// <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> 
        /// <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> 
        /// <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> 
        /// <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> 
        /// <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> 
        /// <li> <p> <code>tag:
        /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> 
        /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> 
        /// <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> 
        /// <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> 
        /// </ul>
        pub fn set_filters(mut self, input: std::option::Option<std::vec::Vec<crate::model::Filter>>) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// Appends an item to `InstanceIds`.
        ///
        /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
        ///
        /// <p>The instance IDs.</p> 
        /// <p>Default: Describes all your instances.</p>
        pub fn instance_ids(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_ids(input.into());
            self
        }
        /// <p>The instance IDs.</p> 
        /// <p>Default: Describes all your instances.</p>
        pub fn set_instance_ids(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.inner = self.inner.set_instance_ids(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token to request the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token to request the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RunInstances`.
                        ///
    /// <p>Launches the specified number of instances using an AMI for which you have permissions.</p> 
    /// <p>You can specify a number of options, or leave the default options. The following rules apply:</p> 
    /// <ul> 
    /// <li> <p>[EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.</p> </li> 
    /// <li> <p>[EC2-Classic] If don't specify an Availability Zone, we choose one for you.</p> </li> 
    /// <li> <p>Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance types available only in a VPC</a>.</p> </li> 
    /// <li> <p>[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.</p> </li> 
    /// <li> <p>Not all instance types support IPv6 addresses. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a>.</p> </li> 
    /// <li> <p>If you don't specify a security group ID, we use the default security group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security groups</a>.</p> </li> 
    /// <li> <p>If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.</p> </li> 
    /// </ul> 
    /// <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>, which is a resource that contains the parameters to launch an instance. When you launch an instance using <code>RunInstances</code>, you can specify the launch template instead of specifying the launch parameters.</p> 
    /// <p>To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.</p> 
    /// <p>An instance is ready for you to use when it's in the <code>running</code> state. You can check the state of your instance using <code>DescribeInstances</code>. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see <code>CreateTags</code> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2 resources</a>.</p> 
    /// <p>Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key pairs</a>.</p> 
    /// <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What to do if an instance immediately terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting connecting to your instance</a>.</p>
    #[derive(std::clone::Clone, std::fmt::Debug, )]
    pub struct RunInstances {
                            handle: std::sync::Arc<super::Handle>,
                            inner: crate::input::run_instances_input::Builder
                        }
    impl RunInstances  {
        /// Creates a new `RunInstances`.
                                pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
                                    Self { handle, inner: Default::default() }
                                }
        
                                /// Sends the request and returns the response.
                                ///
                                /// If an error occurs, an `SdkError` will be returned with additional details that
                                /// can be matched against.
                                ///
                                /// By default, any retryable failures will be retried twice. Retry behavior
                                /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                                /// set when configuring the client.
                                pub async fn send(self) -> std::result::Result<crate::output::RunInstancesOutput, aws_smithy_http::result::SdkError<crate::error::RunInstancesError>>
                                 {
                                    let op = self.inner.build().map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                                        .make_operation(&self.handle.conf)
                                        .await
                                        .map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
                                    self.handle.client.call(op).await
                                }
        /// <p>Reserved.</p>
        pub fn additional_info(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.additional_info(input.into());
            self
        }
        /// <p>Reserved.</p>
        pub fn set_additional_info(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_additional_info(input);
            self
        }
        /// Appends an item to `BlockDeviceMappings`.
        ///
        /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
        ///
        /// <p>The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn block_device_mappings(mut self, input: crate::model::BlockDeviceMapping) -> Self {
            self.inner = self.inner.block_device_mappings(input);
            self
        }
        /// <p>The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_block_device_mappings(mut self, input: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>) -> Self {
            self.inner = self.inner.set_block_device_mappings(input);
            self
        }
        /// <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
        pub fn capacity_reservation_specification(mut self, input: crate::model::CapacityReservationSpecification) -> Self {
            self.inner = self.inner.capacity_reservation_specification(input);
            self
        }
        /// <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
        pub fn set_capacity_reservation_specification(mut self, input: std::option::Option<crate::model::CapacityReservationSpecification>) -> Self {
            self.inner = self.inner.set_capacity_reservation_specification(input);
            self
        }
        /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p> 
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> 
        /// <p>Constraints: Maximum 64 ASCII characters</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p> 
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> 
        /// <p>Constraints: Maximum 64 ASCII characters</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn cpu_options(mut self, input: crate::model::CpuOptionsRequest) -> Self {
            self.inner = self.inner.cpu_options(input);
            self
        }
        /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_cpu_options(mut self, input: std::option::Option<crate::model::CpuOptionsRequest>) -> Self {
            self.inner = self.inner.set_cpu_options(input);
            self
        }
        /// <p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p> 
        /// <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is supported.</p>
        pub fn credit_specification(mut self, input: crate::model::CreditSpecificationRequest) -> Self {
            self.inner = self.inner.credit_specification(input);
            self
        }
        /// <p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p> 
        /// <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is supported.</p>
        pub fn set_credit_specification(mut self, input: std::option::Option<crate::model::CreditSpecificationRequest>) -> Self {
            self.inner = self.inner.set_credit_specification(input);
            self
        }
        /// <p>Indicates whether an instance is enabled for stop protection. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop Protection</a>. </p>
        pub fn disable_api_stop(mut self, input: bool) -> Self {
            self.inner = self.inner.disable_api_stop(input);
            self
        }
        /// <p>Indicates whether an instance is enabled for stop protection. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop Protection</a>. </p>
        pub fn set_disable_api_stop(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_disable_api_stop(input);
            self
        }
        /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn disable_api_termination(mut self, input: bool) -> Self {
            self.inner = self.inner.disable_api_termination(input);
            self
        }
        /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn set_disable_api_termination(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_disable_api_termination(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
        /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn ebs_optimized(mut self, input: bool) -> Self {
            self.inner = self.inner.ebs_optimized(input);
            self
        }
        /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn set_ebs_optimized(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_ebs_optimized(input);
            self
        }
        /// Appends an item to `ElasticGpuSpecification`.
        ///
        /// To override the contents of this collection use [`set_elastic_gpu_specification`](Self::set_elastic_gpu_specification).
        ///
        /// <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn elastic_gpu_specification(mut self, input: crate::model::ElasticGpuSpecification) -> Self {
            self.inner = self.inner.elastic_gpu_specification(input);
            self
        }
        /// <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_elastic_gpu_specification(mut self, input: std::option::Option<std::vec::Vec<crate::model::ElasticGpuSpecification>>) -> Self {
            self.inner = self.inner.set_elastic_gpu_specification(input);
            self
        }
        /// Appends an item to `ElasticInferenceAccelerators`.
        ///
        /// To override the contents of this collection use [`set_elastic_inference_accelerators`](Self::set_elastic_inference_accelerators).
        ///
        /// <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p> 
        /// <p>You cannot specify accelerators from different generations in the same request.</p>
        pub fn elastic_inference_accelerators(mut self, input: crate::model::ElasticInferenceAccelerator) -> Self {
            self.inner = self.inner.elastic_inference_accelerators(input);
            self
        }
        /// <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p> 
        /// <p>You cannot specify accelerators from different generations in the same request.</p>
        pub fn set_elastic_inference_accelerators(mut self, input: std::option::Option<std::vec::Vec<crate::model::ElasticInferenceAccelerator>>) -> Self {
            self.inner = self.inner.set_elastic_inference_accelerators(input);
            self
        }
        /// <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html"> What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p> 
        /// <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
        pub fn enclave_options(mut self, input: crate::model::EnclaveOptionsRequest) -> Self {
            self.inner = self.inner.enclave_options(input);
            self
        }
        /// <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html"> What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p> 
        /// <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
        pub fn set_enclave_options(mut self, input: std::option::Option<crate::model::EnclaveOptionsRequest>) -> Self {
            self.inner = self.inner.set_enclave_options(input);
            self
        }
        /// <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
        pub fn hibernation_options(mut self, input: crate::model::HibernationOptionsRequest) -> Self {
            self.inner = self.inner.hibernation_options(input);
            self
        }
        /// <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
        pub fn set_hibernation_options(mut self, input: std::option::Option<crate::model::HibernationOptionsRequest>) -> Self {
            self.inner = self.inner.set_hibernation_options(input);
            self
        }
        /// <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
        pub fn iam_instance_profile(mut self, input: crate::model::IamInstanceProfileSpecification) -> Self {
            self.inner = self.inner.iam_instance_profile(input);
            self
        }
        /// <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
        pub fn set_iam_instance_profile(mut self, input: std::option::Option<crate::model::IamInstanceProfileSpecification>) -> Self {
            self.inner = self.inner.set_iam_instance_profile(input);
            self
        }
        /// <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_id(input.into());
            self
        }
        /// <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_image_id(input);
            self
        }
        /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> 
        /// <p>Default: <code>stop</code> </p>
        pub fn instance_initiated_shutdown_behavior(mut self, input: crate::model::ShutdownBehavior) -> Self {
            self.inner = self.inner.instance_initiated_shutdown_behavior(input);
            self
        }
        /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> 
        /// <p>Default: <code>stop</code> </p>
        pub fn set_instance_initiated_shutdown_behavior(mut self, input: std::option::Option<crate::model::ShutdownBehavior>) -> Self {
            self.inner = self.inner.set_instance_initiated_shutdown_behavior(input);
            self
        }
        /// <p>The market (purchasing) option for the instances.</p> 
        /// <p>For <code>RunInstances</code>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
        pub fn instance_market_options(mut self, input: crate::model::InstanceMarketOptionsRequest) -> Self {
            self.inner = self.inner.instance_market_options(input);
            self
        }
        /// <p>The market (purchasing) option for the instances.</p> 
        /// <p>For <code>RunInstances</code>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
        pub fn set_instance_market_options(mut self, input: std::option::Option<crate::model::InstanceMarketOptionsRequest>) -> Self {
            self.inner = self.inner.set_instance_market_options(input);
            self
        }
        /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>m1.small</code> </p>
        pub fn instance_type(mut self, input: crate::model::InstanceType) -> Self {
            self.inner = self.inner.instance_type(input);
            self
        }
        /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>m1.small</code> </p>
        pub fn set_instance_type(mut self, input: std::option::Option<crate::model::InstanceType>) -> Self {
            self.inner = self.inner.set_instance_type(input);
            self
        }
        /// <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn ipv6_address_count(mut self, input: i32) -> Self {
            self.inner = self.inner.ipv6_address_count(input);
            self
        }
        /// <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn set_ipv6_address_count(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_ipv6_address_count(input);
            self
        }
        /// Appends an item to `Ipv6Addresses`.
        ///
        /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
        ///
        /// <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn ipv6_addresses(mut self, input: crate::model::InstanceIpv6Address) -> Self {
            self.inner = self.inner.ipv6_addresses(input);
            self
        }
        /// <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn set_ipv6_addresses(mut self, input: std::option::Option<std::vec::Vec<crate::model::InstanceIpv6Address>>) -> Self {
            self.inner = self.inner.set_ipv6_addresses(input);
            self
        }
        /// <p>The ID of the kernel.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn kernel_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kernel_id(input.into());
            self
        }
        /// <p>The ID of the kernel.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn set_kernel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_kernel_id(input);
            self
        }
        /// <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> 
        /// <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> 
        /// </important>
        pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.key_name(input.into());
            self
        }
        /// <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> 
        /// <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> 
        /// </important>
        pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_key_name(input);
            self
        }
        /// <p>The launch template to use to launch the instances. Any parameters that you specify in <code>RunInstances</code> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
        pub fn launch_template(mut self, input: crate::model::LaunchTemplateSpecification) -> Self {
            self.inner = self.inner.launch_template(input);
            self
        }
        /// <p>The launch template to use to launch the instances. Any parameters that you specify in <code>RunInstances</code> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
        pub fn set_launch_template(mut self, input: std::option::Option<crate::model::LaunchTemplateSpecification>) -> Self {
            self.inner = self.inner.set_launch_template(input);
            self
        }
        /// Appends an item to `LicenseSpecifications`.
        ///
        /// To override the contents of this collection use [`set_license_specifications`](Self::set_license_specifications).
        ///
        /// <p>The license configurations.</p>
        pub fn license_specifications(mut self, input: crate::model::LicenseConfigurationRequest) -> Self {
            self.inner = self.inner.license_specifications(input);
            self
        }
        /// <p>The license configurations.</p>
        pub fn set_license_specifications(mut self, input: std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationRequest>>) -> Self {
            self.inner = self.inner.set_license_specifications(input);
            self
        }
        /// <p>The maintenance and recovery options for the instance.</p>
        pub fn maintenance_options(mut self, input: crate::model::InstanceMaintenanceOptionsRequest) -> Self {
            self.inner = self.inner.maintenance_options(input);
            self
        }
        /// <p>The maintenance and recovery options for the instance.</p>
        pub fn set_maintenance_options(mut self, input: std::option::Option<crate::model::InstanceMaintenanceOptionsRequest>) -> Self {
            self.inner = self.inner.set_maintenance_options(input);
            self
        }
        /// <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
        pub fn max_count(mut self, input: i32) -> Self {
            self.inner = self.inner.max_count(input);
            self
        }
        /// <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
        pub fn set_max_count(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_count(input);
            self
        }
        /// <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
        pub fn metadata_options(mut self, input: crate::model::InstanceMetadataOptionsRequest) -> Self {
            self.inner = self.inner.metadata_options(input);
            self
        }
        /// <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
        pub fn set_metadata_options(mut self, input: std::option::Option<crate::model::InstanceMetadataOptionsRequest>) -> Self {
            self.inner = self.inner.set_metadata_options(input);
            self
        }
        /// <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
        pub fn min_count(mut self, input: i32) -> Self {
            self.inner = self.inner.min_count(input);
            self
        }
        /// <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
        pub fn set_min_count(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_min_count(input);
            self
        }
        /// <p>Specifies whether detailed monitoring is enabled for the instance.</p>
        pub fn monitoring(mut self, input: crate::model::RunInstancesMonitoringEnabled) -> Self {
            self.inner = self.inner.monitoring(input);
            self
        }
        /// <p>Specifies whether detailed monitoring is enabled for the instance.</p>
        pub fn set_monitoring(mut self, input: std::option::Option<crate::model::RunInstancesMonitoringEnabled>) -> Self {
            self.inner = self.inner.set_monitoring(input);
            self
        }
        /// Appends an item to `NetworkInterfaces`.
        ///
        /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
        ///
        /// <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</p>
        pub fn network_interfaces(mut self, input: crate::model::InstanceNetworkInterfaceSpecification) -> Self {
            self.inner = self.inner.network_interfaces(input);
            self
        }
        /// <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</p>
        pub fn set_network_interfaces(mut self, input: std::option::Option<std::vec::Vec<crate::model::InstanceNetworkInterfaceSpecification>>) -> Self {
            self.inner = self.inner.set_network_interfaces(input);
            self
        }
        /// <p>The placement for the instance.</p>
        pub fn placement(mut self, input: crate::model::Placement) -> Self {
            self.inner = self.inner.placement(input);
            self
        }
        /// <p>The placement for the instance.</p>
        pub fn set_placement(mut self, input: std::option::Option<crate::model::Placement>) -> Self {
            self.inner = self.inner.set_placement(input);
            self
        }
        /// <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
        pub fn private_dns_name_options(mut self, input: crate::model::PrivateDnsNameOptionsRequest) -> Self {
            self.inner = self.inner.private_dns_name_options(input);
            self
        }
        /// <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
        pub fn set_private_dns_name_options(mut self, input: std::option::Option<crate::model::PrivateDnsNameOptionsRequest>) -> Self {
            self.inner = self.inner.set_private_dns_name_options(input);
            self
        }
        /// <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> 
        /// <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn private_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.private_ip_address(input.into());
            self
        }
        /// <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> 
        /// <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn set_private_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_private_ip_address(input);
            self
        }
        /// <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn ramdisk_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ramdisk_id(input.into());
            self
        }
        /// <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn set_ramdisk_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ramdisk_id(input);
            self
        }
        /// Appends an item to `SecurityGroupIds`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        ///
        /// <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
        pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_group_ids(input.into());
            self
        }
        /// <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
        pub fn set_security_group_ids(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.inner = self.inner.set_security_group_ids(input);
            self
        }
        /// Appends an item to `SecurityGroups`.
        ///
        /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
        ///
        /// <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> 
        /// <p>Default: Amazon EC2 uses the default security group.</p>
        pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_groups(input.into());
            self
        }
        /// <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> 
        /// <p>Default: Amazon EC2 uses the default security group.</p>
        pub fn set_security_groups(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.inner = self.inner.set_security_groups(input);
            self
        }
        /// <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> 
        /// <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
        pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_id(input.into());
            self
        }
        /// <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> 
        /// <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
        pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_subnet_id(input);
            self
        }
        /// Appends an item to `TagSpecifications`.
        ///
        /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
        ///
        /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
        pub fn tag_specifications(mut self, input: crate::model::TagSpecification) -> Self {
            self.inner = self.inner.tag_specifications(input);
            self
        }
        /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
        pub fn set_tag_specifications(mut self, input: std::option::Option<std::vec::Vec<crate::model::TagSpecification>>) -> Self {
            self.inner = self.inner.set_tag_specifications(input);
            self
        }
        /// <p>The user data script to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
        pub fn user_data(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_data(input.into());
            self
        }
        /// <p>The user data script to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
        pub fn set_user_data(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_data(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TerminateInstances`.
                        ///
    /// <p>Shuts down the specified instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds. </p> 
    /// <p>If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.</p> 
    /// <p>If you terminate multiple instances across multiple Availability Zones, and one or more of the specified instances are enabled for termination protection, the request fails with the following results:</p> 
    /// <ul> 
    /// <li> <p>The specified instances that are in the same Availability Zone as the protected instance are not terminated.</p> </li> 
    /// <li> <p>The specified instances that are in different Availability Zones, where no other specified instances are protected, are successfully terminated.</p> </li> 
    /// </ul> 
    /// <p>For example, say you have the following instances:</p> 
    /// <ul> 
    /// <li> <p>Instance A: <code>us-east-1a</code>; Not protected</p> </li> 
    /// <li> <p>Instance B: <code>us-east-1a</code>; Not protected</p> </li> 
    /// <li> <p>Instance C: <code>us-east-1b</code>; Protected</p> </li> 
    /// <li> <p>Instance D: <code>us-east-1b</code>; not protected</p> </li> 
    /// </ul> 
    /// <p>If you attempt to terminate all of these instances in the same request, the request reports failure with the following results:</p> 
    /// <ul> 
    /// <li> <p>Instance A and Instance B are successfully terminated because none of the specified instances in <code>us-east-1a</code> are enabled for termination protection.</p> </li> 
    /// <li> <p>Instance C and Instance D fail to terminate because at least one of the specified instances in <code>us-east-1b</code> (Instance C) is enabled for termination protection.</p> </li> 
    /// </ul> 
    /// <p>Terminated instances remain visible after termination (for approximately one hour).</p> 
    /// <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.</p> 
    /// <p>You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set to <code>true</code> are automatically deleted. For more information about the differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting terminating your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #[derive(std::clone::Clone, std::fmt::Debug, )]
    pub struct TerminateInstances {
                            handle: std::sync::Arc<super::Handle>,
                            inner: crate::input::terminate_instances_input::Builder
                        }
    impl TerminateInstances  {
        /// Creates a new `TerminateInstances`.
                                pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
                                    Self { handle, inner: Default::default() }
                                }
        
                                /// Sends the request and returns the response.
                                ///
                                /// If an error occurs, an `SdkError` will be returned with additional details that
                                /// can be matched against.
                                ///
                                /// By default, any retryable failures will be retried twice. Retry behavior
                                /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                                /// set when configuring the client.
                                pub async fn send(self) -> std::result::Result<crate::output::TerminateInstancesOutput, aws_smithy_http::result::SdkError<crate::error::TerminateInstancesError>>
                                 {
                                    let op = self.inner.build().map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                                        .make_operation(&self.handle.conf)
                                        .await
                                        .map_err(|err|aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
                                    self.handle.client.call(op).await
                                }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
        /// Appends an item to `InstanceIds`.
        ///
        /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
        ///
        /// <p>The IDs of the instances.</p> 
        /// <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn instance_ids(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_ids(input.into());
            self
        }
        /// <p>The IDs of the instances.</p> 
        /// <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn set_instance_ids(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.inner = self.inner.set_instance_ids(input);
            self
        }
    }
    
    
}

impl Client {
    /// Creates a client with the given service config and connector override.
                    pub fn from_conf_conn<C, E>(conf: crate::Config, conn: C) -> Self
                    where
                        C: aws_smithy_client::bounds::SmithyConnector<Error = E> + Send + 'static,
                        E: Into<aws_smithy_http::result::ConnectorError>,
                    {
                        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
                        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
                        let sleep_impl = conf.sleep_impl.clone();
                        let mut builder = aws_smithy_client::Builder::new()
                            .connector(aws_smithy_client::erase::DynConnector::new(conn))
                            .middleware(aws_smithy_client::erase::DynMiddleware::new(crate::middleware::DefaultMiddleware::new()));
                        builder.set_retry_config(retry_config.into());
                        builder.set_timeout_config(timeout_config);
                        if let Some(sleep_impl) = sleep_impl {
                            builder.set_sleep_impl(Some(sleep_impl));
                        }
                        let client = builder.build();
                        Self { handle: std::sync::Arc::new(Handle { client, conf }) }
                    }
    
                    /// Creates a new client from a shared config.
                    #[cfg(any(feature = "rustls", feature = "native-tls"))]
                    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
                        Self::from_conf(sdk_config.into())
                    }
    
                    /// Creates a new client from the service [`Config`](crate::Config).
                    #[cfg(any(feature = "rustls", feature = "native-tls"))]
                    pub fn from_conf(conf: crate::Config) -> Self {
                        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
                        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
                        let sleep_impl = conf.sleep_impl.clone();
                        let mut builder = aws_smithy_client::Builder::dyn_https()
                            .middleware(aws_smithy_client::erase::DynMiddleware::new(crate::middleware::DefaultMiddleware::new()));
                        builder.set_retry_config(retry_config.into());
                        builder.set_timeout_config(timeout_config);
                        // the builder maintains a try-state. To avoid suppressing the warning when sleep is unset,
                        // only set it if we actually have a sleep impl.
                        if let Some(sleep_impl) = sleep_impl {
                            builder.set_sleep_impl(Some(sleep_impl));
                        }
                        let client = builder.build();
    
                        Self { handle: std::sync::Arc::new(Handle { client, conf }) }
                    }
}

