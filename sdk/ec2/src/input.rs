// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;

/// See [`CreateTagsInput`](crate::input::CreateTagsInput).
pub mod create_tags_input {
    
    /// A builder for [`CreateTagsInput`](crate::input::CreateTagsInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug, )]
    pub struct Builder {
        pub(crate) dry_run: std::option::Option<bool>,
        pub(crate) resources: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.dry_run = Some(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.dry_run = input; self
        }
        /// Appends an item to `resources`.
        ///
        /// To override the contents of this collection use [`set_resources`](Self::set_resources).
        ///
        /// <p>The IDs of the resources, separated by spaces.</p> 
        /// <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn resources(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.resources.unwrap_or_default();
                            v.push(input.into());
                            self.resources = Some(v);
                            self
        }
        /// <p>The IDs of the resources, separated by spaces.</p> 
        /// <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn set_resources(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.resources = input; self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
                            v.push(input);
                            self.tags = Some(v);
                            self
        }
        /// <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
        pub fn set_tags(mut self, input: std::option::Option<std::vec::Vec<crate::model::Tag>>) -> Self {
            self.tags = input; self
        }
        /// Consumes the builder and constructs a [`CreateTagsInput`](crate::input::CreateTagsInput).
        pub fn build(self) -> Result<crate::input::CreateTagsInput, aws_smithy_http::operation::BuildError> {
            Ok(
                crate::input::CreateTagsInput {
                    dry_run: self.dry_run
                    ,
                    resources: self.resources
                    ,
                    tags: self.tags
                    ,
                }
            )
        }
    }
    
    
}
#[doc(hidden)] pub type CreateTagsInputOperationOutputAlias = crate::operation::CreateTags;
            #[doc(hidden)] pub type CreateTagsInputOperationRetryAlias = aws_http::retry::AwsErrorRetryPolicy;
impl CreateTagsInput {
    /// Consumes the builder and constructs an Operation<[`CreateTags`](crate::operation::CreateTags)>
    #[allow(unused_mut)]#[allow(clippy::let_and_return)]#[allow(clippy::needless_borrow)]pub async fn make_operation(&self, _config: &crate::config::Config) -> std::result::Result<aws_smithy_http::operation::Operation<crate::operation::CreateTags, aws_http::retry::AwsErrorRetryPolicy>, aws_smithy_http::operation::BuildError> {
        let mut request = {
            fn uri_base(_input: &crate::input::CreateTagsInput, output: &mut String) -> Result<(), aws_smithy_http::operation::BuildError> {
                write!(output, "/").expect("formatting should succeed");
                Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]fn update_http_builder(
                            input: &crate::input::CreateTagsInput,
                            builder: http::request::Builder
                        ) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
                let mut uri = String::new();
                uri_base(input, &mut uri)?;
                Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&self, http::request::Builder::new())?;
            builder = aws_smithy_http::header::set_request_header_if_absent(builder, http::header::CONTENT_TYPE, "application/x-www-form-urlencoded");
            builder
        };
        let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]let body = aws_smithy_http::body::SdkBody::from(
            crate::operation_ser::serialize_operation_crate_operation_create_tags(&self)?
        );
        if let Some(content_length) = body.content_length() {
                                request = aws_smithy_http::header::set_request_header_if_absent(request, http::header::CONTENT_LENGTH, content_length);
                            }
        let request = request.body(body).expect("should be valid request");
        let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        let mut user_agent = aws_http::user_agent::AwsUserAgent::new_from_environment(
                            aws_types::os_shim_internal::Env::real(),
                            crate::API_METADATA.clone(),
                        );
                        if let Some(app_name) = _config.app_name() {
                            user_agent = user_agent.with_app_name(app_name.clone());
                        }
                        request.properties_mut().insert(user_agent);
        let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
                            request.properties_mut().insert(aws_types::SigningService::from_static(_config.signing_service()));
        aws_endpoint::set_endpoint_resolver(&mut request.properties_mut(), _config.endpoint_resolver.clone());
        if let Some(region) = &_config.region {
                                request.properties_mut().insert(region.clone());
                            }
        aws_http::auth::set_provider(&mut request.properties_mut(), _config.credentials_provider.clone());
        let op = aws_smithy_http::operation::Operation::new(request, crate::operation::CreateTags::new())
                            .with_metadata(aws_smithy_http::operation::Metadata::new("CreateTags", "ec2"));
        let op = op.with_retry_policy(aws_http::retry::AwsErrorRetryPolicy::new());
        Ok(op)
    }
    /// Creates a new builder-style object to manufacture [`CreateTagsInput`](crate::input::CreateTagsInput).
    pub fn builder() -> crate::input::create_tags_input::Builder {
        crate::input::create_tags_input::Builder::default()
    }
}

/// See [`DescribeInstancesInput`](crate::input::DescribeInstancesInput).
pub mod describe_instances_input {
    
    /// A builder for [`DescribeInstancesInput`](crate::input::DescribeInstancesInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug, )]
    pub struct Builder {
        pub(crate) dry_run: std::option::Option<bool>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) max_results: std::option::Option<i32>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.dry_run = Some(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.dry_run = input; self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>The filters.</p> 
        /// <ul> 
        /// <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> 
        /// <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> 
        /// <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> 
        /// <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> 
        /// <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> 
        /// <li> <p> <code>capacity-reservation-id</code> - The ID of the Capacity Reservation into which the instance was launched.</p> </li> 
        /// <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> 
        /// <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> 
        /// <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> 
        /// <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> 
        /// <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li> 
        /// <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> 
        /// <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> 
        /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> 
        /// <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> 
        /// <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> 
        /// <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> 
        /// <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> 
        /// <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> 
        /// <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> 
        /// <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> 
        /// <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> 
        /// <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> 
        /// <li> <p> <code>launch-time</code> - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an entire day.</p> </li> 
        /// <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> 
        /// <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> 
        /// <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> 
        /// <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by Amazon Web Services.</p> </li> 
        /// <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> 
        /// <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> 
        /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> 
        /// <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> 
        /// <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p> </li> 
        /// <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> 
        /// <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> 
        /// <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> 
        /// <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> 
        /// <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> 
        /// <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> 
        /// <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> 
        /// <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> 
        /// <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p> </li> 
        /// <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> 
        /// <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> 
        /// <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> 
        /// <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> 
        /// <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> 
        /// <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> 
        /// <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> 
        /// <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> 
        /// <li> <p> <code>tag:
        /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> 
        /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> 
        /// <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> 
        /// <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> 
        /// </ul>
        pub fn filters(mut self, input: crate::model::Filter) -> Self {
            let mut v = self.filters.unwrap_or_default();
                            v.push(input);
                            self.filters = Some(v);
                            self
        }
        /// <p>The filters.</p> 
        /// <ul> 
        /// <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> 
        /// <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> 
        /// <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> 
        /// <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> 
        /// <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> 
        /// <li> <p> <code>capacity-reservation-id</code> - The ID of the Capacity Reservation into which the instance was launched.</p> </li> 
        /// <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> 
        /// <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> 
        /// <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> 
        /// <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> 
        /// <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> 
        /// <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li> 
        /// <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> 
        /// <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> 
        /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> 
        /// <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> 
        /// <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> 
        /// <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> 
        /// <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> 
        /// <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> 
        /// <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> 
        /// <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> 
        /// <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> 
        /// <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> 
        /// <li> <p> <code>launch-time</code> - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an entire day.</p> </li> 
        /// <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> 
        /// <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> 
        /// <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> 
        /// <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> 
        /// <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> 
        /// <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
        /// <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> 
        /// <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> 
        /// <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by Amazon Web Services.</p> </li> 
        /// <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> 
        /// <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> 
        /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> 
        /// <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> 
        /// <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> 
        /// <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p> </li> 
        /// <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> 
        /// <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> 
        /// <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> 
        /// <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> 
        /// <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> 
        /// <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> 
        /// <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> 
        /// <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> 
        /// <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> 
        /// <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p> </li> 
        /// <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> 
        /// <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> 
        /// <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> 
        /// <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> 
        /// <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> 
        /// <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> 
        /// <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> 
        /// <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> 
        /// <li> <p> <code>tag:
        /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> 
        /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> 
        /// <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> 
        /// <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> 
        /// <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> 
        /// </ul>
        pub fn set_filters(mut self, input: std::option::Option<std::vec::Vec<crate::model::Filter>>) -> Self {
            self.filters = input; self
        }
        /// Appends an item to `instance_ids`.
        ///
        /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
        ///
        /// <p>The instance IDs.</p> 
        /// <p>Default: Describes all your instances.</p>
        pub fn instance_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.instance_ids.unwrap_or_default();
                            v.push(input.into());
                            self.instance_ids = Some(v);
                            self
        }
        /// <p>The instance IDs.</p> 
        /// <p>Default: Describes all your instances.</p>
        pub fn set_instance_ids(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.instance_ids = input; self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.max_results = Some(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.max_results = input; self
        }
        /// <p>The token to request the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to request the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input; self
        }
        /// Consumes the builder and constructs a [`DescribeInstancesInput`](crate::input::DescribeInstancesInput).
        pub fn build(self) -> Result<crate::input::DescribeInstancesInput, aws_smithy_http::operation::BuildError> {
            Ok(
                crate::input::DescribeInstancesInput {
                    dry_run: self.dry_run
                    ,
                    filters: self.filters
                    ,
                    instance_ids: self.instance_ids
                    ,
                    max_results: self.max_results
                    ,
                    next_token: self.next_token
                    ,
                }
            )
        }
    }
    
    
}
#[doc(hidden)] pub type DescribeInstancesInputOperationOutputAlias = crate::operation::DescribeInstances;
            #[doc(hidden)] pub type DescribeInstancesInputOperationRetryAlias = aws_http::retry::AwsErrorRetryPolicy;
impl DescribeInstancesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeInstances`](crate::operation::DescribeInstances)>
    #[allow(unused_mut)]#[allow(clippy::let_and_return)]#[allow(clippy::needless_borrow)]pub async fn make_operation(&self, _config: &crate::config::Config) -> std::result::Result<aws_smithy_http::operation::Operation<crate::operation::DescribeInstances, aws_http::retry::AwsErrorRetryPolicy>, aws_smithy_http::operation::BuildError> {
        let mut request = {
            fn uri_base(_input: &crate::input::DescribeInstancesInput, output: &mut String) -> Result<(), aws_smithy_http::operation::BuildError> {
                write!(output, "/").expect("formatting should succeed");
                Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]fn update_http_builder(
                            input: &crate::input::DescribeInstancesInput,
                            builder: http::request::Builder
                        ) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
                let mut uri = String::new();
                uri_base(input, &mut uri)?;
                Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&self, http::request::Builder::new())?;
            builder = aws_smithy_http::header::set_request_header_if_absent(builder, http::header::CONTENT_TYPE, "application/x-www-form-urlencoded");
            builder
        };
        let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]let body = aws_smithy_http::body::SdkBody::from(
            crate::operation_ser::serialize_operation_crate_operation_describe_instances(&self)?
        );
        if let Some(content_length) = body.content_length() {
                                request = aws_smithy_http::header::set_request_header_if_absent(request, http::header::CONTENT_LENGTH, content_length);
                            }
        let request = request.body(body).expect("should be valid request");
        let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        let mut user_agent = aws_http::user_agent::AwsUserAgent::new_from_environment(
                            aws_types::os_shim_internal::Env::real(),
                            crate::API_METADATA.clone(),
                        );
                        if let Some(app_name) = _config.app_name() {
                            user_agent = user_agent.with_app_name(app_name.clone());
                        }
                        request.properties_mut().insert(user_agent);
        let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
                            request.properties_mut().insert(aws_types::SigningService::from_static(_config.signing_service()));
        aws_endpoint::set_endpoint_resolver(&mut request.properties_mut(), _config.endpoint_resolver.clone());
        if let Some(region) = &_config.region {
                                request.properties_mut().insert(region.clone());
                            }
        aws_http::auth::set_provider(&mut request.properties_mut(), _config.credentials_provider.clone());
        let op = aws_smithy_http::operation::Operation::new(request, crate::operation::DescribeInstances::new())
                            .with_metadata(aws_smithy_http::operation::Metadata::new("DescribeInstances", "ec2"));
        let op = op.with_retry_policy(aws_http::retry::AwsErrorRetryPolicy::new());
        Ok(op)
    }
    /// Creates a new builder-style object to manufacture [`DescribeInstancesInput`](crate::input::DescribeInstancesInput).
    pub fn builder() -> crate::input::describe_instances_input::Builder {
        crate::input::describe_instances_input::Builder::default()
    }
}

/// See [`RunInstancesInput`](crate::input::RunInstancesInput).
pub mod run_instances_input {
    
    /// A builder for [`RunInstancesInput`](crate::input::RunInstancesInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug, )]
    pub struct Builder {
        pub(crate) additional_info: std::option::Option<std::string::String>,
        pub(crate) block_device_mappings: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
        pub(crate) capacity_reservation_specification: std::option::Option<crate::model::CapacityReservationSpecification>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) cpu_options: std::option::Option<crate::model::CpuOptionsRequest>,
        pub(crate) credit_specification: std::option::Option<crate::model::CreditSpecificationRequest>,
        pub(crate) disable_api_stop: std::option::Option<bool>,
        pub(crate) disable_api_termination: std::option::Option<bool>,
        pub(crate) dry_run: std::option::Option<bool>,
        pub(crate) ebs_optimized: std::option::Option<bool>,
        pub(crate) elastic_gpu_specification: std::option::Option<std::vec::Vec<crate::model::ElasticGpuSpecification>>,
        pub(crate) elastic_inference_accelerators: std::option::Option<std::vec::Vec<crate::model::ElasticInferenceAccelerator>>,
        pub(crate) enclave_options: std::option::Option<crate::model::EnclaveOptionsRequest>,
        pub(crate) hibernation_options: std::option::Option<crate::model::HibernationOptionsRequest>,
        pub(crate) iam_instance_profile: std::option::Option<crate::model::IamInstanceProfileSpecification>,
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) instance_initiated_shutdown_behavior: std::option::Option<crate::model::ShutdownBehavior>,
        pub(crate) instance_market_options: std::option::Option<crate::model::InstanceMarketOptionsRequest>,
        pub(crate) instance_type: std::option::Option<crate::model::InstanceType>,
        pub(crate) ipv6_address_count: std::option::Option<i32>,
        pub(crate) ipv6_addresses: std::option::Option<std::vec::Vec<crate::model::InstanceIpv6Address>>,
        pub(crate) kernel_id: std::option::Option<std::string::String>,
        pub(crate) key_name: std::option::Option<std::string::String>,
        pub(crate) launch_template: std::option::Option<crate::model::LaunchTemplateSpecification>,
        pub(crate) license_specifications: std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationRequest>>,
        pub(crate) maintenance_options: std::option::Option<crate::model::InstanceMaintenanceOptionsRequest>,
        pub(crate) max_count: std::option::Option<i32>,
        pub(crate) metadata_options: std::option::Option<crate::model::InstanceMetadataOptionsRequest>,
        pub(crate) min_count: std::option::Option<i32>,
        pub(crate) monitoring: std::option::Option<crate::model::RunInstancesMonitoringEnabled>,
        pub(crate) network_interfaces: std::option::Option<std::vec::Vec<crate::model::InstanceNetworkInterfaceSpecification>>,
        pub(crate) placement: std::option::Option<crate::model::Placement>,
        pub(crate) private_dns_name_options: std::option::Option<crate::model::PrivateDnsNameOptionsRequest>,
        pub(crate) private_ip_address: std::option::Option<std::string::String>,
        pub(crate) ramdisk_id: std::option::Option<std::string::String>,
        pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) subnet_id: std::option::Option<std::string::String>,
        pub(crate) tag_specifications: std::option::Option<std::vec::Vec<crate::model::TagSpecification>>,
        pub(crate) user_data: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Reserved.</p>
        pub fn additional_info(mut self, input: impl Into<std::string::String>) -> Self {
            self.additional_info = Some(input.into());
            self
        }
        /// <p>Reserved.</p>
        pub fn set_additional_info(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.additional_info = input; self
        }
        /// Appends an item to `block_device_mappings`.
        ///
        /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
        ///
        /// <p>The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn block_device_mappings(mut self, input: crate::model::BlockDeviceMapping) -> Self {
            let mut v = self.block_device_mappings.unwrap_or_default();
                            v.push(input);
                            self.block_device_mappings = Some(v);
                            self
        }
        /// <p>The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_block_device_mappings(mut self, input: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>) -> Self {
            self.block_device_mappings = input; self
        }
        /// <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
        pub fn capacity_reservation_specification(mut self, input: crate::model::CapacityReservationSpecification) -> Self {
            self.capacity_reservation_specification = Some(input);
            self
        }
        /// <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
        pub fn set_capacity_reservation_specification(mut self, input: std::option::Option<crate::model::CapacityReservationSpecification>) -> Self {
            self.capacity_reservation_specification = input; self
        }
        /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p> 
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> 
        /// <p>Constraints: Maximum 64 ASCII characters</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p> 
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> 
        /// <p>Constraints: Maximum 64 ASCII characters</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input; self
        }
        /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn cpu_options(mut self, input: crate::model::CpuOptionsRequest) -> Self {
            self.cpu_options = Some(input);
            self
        }
        /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_cpu_options(mut self, input: std::option::Option<crate::model::CpuOptionsRequest>) -> Self {
            self.cpu_options = input; self
        }
        /// <p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p> 
        /// <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is supported.</p>
        pub fn credit_specification(mut self, input: crate::model::CreditSpecificationRequest) -> Self {
            self.credit_specification = Some(input);
            self
        }
        /// <p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p> 
        /// <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is supported.</p>
        pub fn set_credit_specification(mut self, input: std::option::Option<crate::model::CreditSpecificationRequest>) -> Self {
            self.credit_specification = input; self
        }
        /// <p>Indicates whether an instance is enabled for stop protection. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop Protection</a>. </p>
        pub fn disable_api_stop(mut self, input: bool) -> Self {
            self.disable_api_stop = Some(input);
            self
        }
        /// <p>Indicates whether an instance is enabled for stop protection. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop Protection</a>. </p>
        pub fn set_disable_api_stop(mut self, input: std::option::Option<bool>) -> Self {
            self.disable_api_stop = input; self
        }
        /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn disable_api_termination(mut self, input: bool) -> Self {
            self.disable_api_termination = Some(input);
            self
        }
        /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn set_disable_api_termination(mut self, input: std::option::Option<bool>) -> Self {
            self.disable_api_termination = input; self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.dry_run = Some(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.dry_run = input; self
        }
        /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn ebs_optimized(mut self, input: bool) -> Self {
            self.ebs_optimized = Some(input);
            self
        }
        /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> 
        /// <p>Default: <code>false</code> </p>
        pub fn set_ebs_optimized(mut self, input: std::option::Option<bool>) -> Self {
            self.ebs_optimized = input; self
        }
        /// Appends an item to `elastic_gpu_specification`.
        ///
        /// To override the contents of this collection use [`set_elastic_gpu_specification`](Self::set_elastic_gpu_specification).
        ///
        /// <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn elastic_gpu_specification(mut self, input: crate::model::ElasticGpuSpecification) -> Self {
            let mut v = self.elastic_gpu_specification.unwrap_or_default();
                            v.push(input);
                            self.elastic_gpu_specification = Some(v);
                            self
        }
        /// <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_elastic_gpu_specification(mut self, input: std::option::Option<std::vec::Vec<crate::model::ElasticGpuSpecification>>) -> Self {
            self.elastic_gpu_specification = input; self
        }
        /// Appends an item to `elastic_inference_accelerators`.
        ///
        /// To override the contents of this collection use [`set_elastic_inference_accelerators`](Self::set_elastic_inference_accelerators).
        ///
        /// <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p> 
        /// <p>You cannot specify accelerators from different generations in the same request.</p>
        pub fn elastic_inference_accelerators(mut self, input: crate::model::ElasticInferenceAccelerator) -> Self {
            let mut v = self.elastic_inference_accelerators.unwrap_or_default();
                            v.push(input);
                            self.elastic_inference_accelerators = Some(v);
                            self
        }
        /// <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p> 
        /// <p>You cannot specify accelerators from different generations in the same request.</p>
        pub fn set_elastic_inference_accelerators(mut self, input: std::option::Option<std::vec::Vec<crate::model::ElasticInferenceAccelerator>>) -> Self {
            self.elastic_inference_accelerators = input; self
        }
        /// <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html"> What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p> 
        /// <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
        pub fn enclave_options(mut self, input: crate::model::EnclaveOptionsRequest) -> Self {
            self.enclave_options = Some(input);
            self
        }
        /// <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html"> What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p> 
        /// <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
        pub fn set_enclave_options(mut self, input: std::option::Option<crate::model::EnclaveOptionsRequest>) -> Self {
            self.enclave_options = input; self
        }
        /// <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
        pub fn hibernation_options(mut self, input: crate::model::HibernationOptionsRequest) -> Self {
            self.hibernation_options = Some(input);
            self
        }
        /// <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
        pub fn set_hibernation_options(mut self, input: std::option::Option<crate::model::HibernationOptionsRequest>) -> Self {
            self.hibernation_options = input; self
        }
        /// <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
        pub fn iam_instance_profile(mut self, input: crate::model::IamInstanceProfileSpecification) -> Self {
            self.iam_instance_profile = Some(input);
            self
        }
        /// <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
        pub fn set_iam_instance_profile(mut self, input: std::option::Option<crate::model::IamInstanceProfileSpecification>) -> Self {
            self.iam_instance_profile = input; self
        }
        /// <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input; self
        }
        /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> 
        /// <p>Default: <code>stop</code> </p>
        pub fn instance_initiated_shutdown_behavior(mut self, input: crate::model::ShutdownBehavior) -> Self {
            self.instance_initiated_shutdown_behavior = Some(input);
            self
        }
        /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> 
        /// <p>Default: <code>stop</code> </p>
        pub fn set_instance_initiated_shutdown_behavior(mut self, input: std::option::Option<crate::model::ShutdownBehavior>) -> Self {
            self.instance_initiated_shutdown_behavior = input; self
        }
        /// <p>The market (purchasing) option for the instances.</p> 
        /// <p>For <code>RunInstances</code>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
        pub fn instance_market_options(mut self, input: crate::model::InstanceMarketOptionsRequest) -> Self {
            self.instance_market_options = Some(input);
            self
        }
        /// <p>The market (purchasing) option for the instances.</p> 
        /// <p>For <code>RunInstances</code>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
        pub fn set_instance_market_options(mut self, input: std::option::Option<crate::model::InstanceMarketOptionsRequest>) -> Self {
            self.instance_market_options = input; self
        }
        /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>m1.small</code> </p>
        pub fn instance_type(mut self, input: crate::model::InstanceType) -> Self {
            self.instance_type = Some(input);
            self
        }
        /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// <p>Default: <code>m1.small</code> </p>
        pub fn set_instance_type(mut self, input: std::option::Option<crate::model::InstanceType>) -> Self {
            self.instance_type = input; self
        }
        /// <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn ipv6_address_count(mut self, input: i32) -> Self {
            self.ipv6_address_count = Some(input);
            self
        }
        /// <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn set_ipv6_address_count(mut self, input: std::option::Option<i32>) -> Self {
            self.ipv6_address_count = input; self
        }
        /// Appends an item to `ipv6_addresses`.
        ///
        /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
        ///
        /// <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn ipv6_addresses(mut self, input: crate::model::InstanceIpv6Address) -> Self {
            let mut v = self.ipv6_addresses.unwrap_or_default();
                            v.push(input);
                            self.ipv6_addresses = Some(v);
                            self
        }
        /// <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn set_ipv6_addresses(mut self, input: std::option::Option<std::vec::Vec<crate::model::InstanceIpv6Address>>) -> Self {
            self.ipv6_addresses = input; self
        }
        /// <p>The ID of the kernel.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn kernel_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kernel_id = Some(input.into());
            self
        }
        /// <p>The ID of the kernel.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn set_kernel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kernel_id = input; self
        }
        /// <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> 
        /// <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> 
        /// </important>
        pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_name = Some(input.into());
            self
        }
        /// <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> 
        /// <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> 
        /// </important>
        pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_name = input; self
        }
        /// <p>The launch template to use to launch the instances. Any parameters that you specify in <code>RunInstances</code> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
        pub fn launch_template(mut self, input: crate::model::LaunchTemplateSpecification) -> Self {
            self.launch_template = Some(input);
            self
        }
        /// <p>The launch template to use to launch the instances. Any parameters that you specify in <code>RunInstances</code> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
        pub fn set_launch_template(mut self, input: std::option::Option<crate::model::LaunchTemplateSpecification>) -> Self {
            self.launch_template = input; self
        }
        /// Appends an item to `license_specifications`.
        ///
        /// To override the contents of this collection use [`set_license_specifications`](Self::set_license_specifications).
        ///
        /// <p>The license configurations.</p>
        pub fn license_specifications(mut self, input: crate::model::LicenseConfigurationRequest) -> Self {
            let mut v = self.license_specifications.unwrap_or_default();
                            v.push(input);
                            self.license_specifications = Some(v);
                            self
        }
        /// <p>The license configurations.</p>
        pub fn set_license_specifications(mut self, input: std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationRequest>>) -> Self {
            self.license_specifications = input; self
        }
        /// <p>The maintenance and recovery options for the instance.</p>
        pub fn maintenance_options(mut self, input: crate::model::InstanceMaintenanceOptionsRequest) -> Self {
            self.maintenance_options = Some(input);
            self
        }
        /// <p>The maintenance and recovery options for the instance.</p>
        pub fn set_maintenance_options(mut self, input: std::option::Option<crate::model::InstanceMaintenanceOptionsRequest>) -> Self {
            self.maintenance_options = input; self
        }
        /// <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
        pub fn max_count(mut self, input: i32) -> Self {
            self.max_count = Some(input);
            self
        }
        /// <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
        pub fn set_max_count(mut self, input: std::option::Option<i32>) -> Self {
            self.max_count = input; self
        }
        /// <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
        pub fn metadata_options(mut self, input: crate::model::InstanceMetadataOptionsRequest) -> Self {
            self.metadata_options = Some(input);
            self
        }
        /// <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
        pub fn set_metadata_options(mut self, input: std::option::Option<crate::model::InstanceMetadataOptionsRequest>) -> Self {
            self.metadata_options = input; self
        }
        /// <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
        pub fn min_count(mut self, input: i32) -> Self {
            self.min_count = Some(input);
            self
        }
        /// <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> 
        /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
        pub fn set_min_count(mut self, input: std::option::Option<i32>) -> Self {
            self.min_count = input; self
        }
        /// <p>Specifies whether detailed monitoring is enabled for the instance.</p>
        pub fn monitoring(mut self, input: crate::model::RunInstancesMonitoringEnabled) -> Self {
            self.monitoring = Some(input);
            self
        }
        /// <p>Specifies whether detailed monitoring is enabled for the instance.</p>
        pub fn set_monitoring(mut self, input: std::option::Option<crate::model::RunInstancesMonitoringEnabled>) -> Self {
            self.monitoring = input; self
        }
        /// Appends an item to `network_interfaces`.
        ///
        /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
        ///
        /// <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</p>
        pub fn network_interfaces(mut self, input: crate::model::InstanceNetworkInterfaceSpecification) -> Self {
            let mut v = self.network_interfaces.unwrap_or_default();
                            v.push(input);
                            self.network_interfaces = Some(v);
                            self
        }
        /// <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</p>
        pub fn set_network_interfaces(mut self, input: std::option::Option<std::vec::Vec<crate::model::InstanceNetworkInterfaceSpecification>>) -> Self {
            self.network_interfaces = input; self
        }
        /// <p>The placement for the instance.</p>
        pub fn placement(mut self, input: crate::model::Placement) -> Self {
            self.placement = Some(input);
            self
        }
        /// <p>The placement for the instance.</p>
        pub fn set_placement(mut self, input: std::option::Option<crate::model::Placement>) -> Self {
            self.placement = input; self
        }
        /// <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
        pub fn private_dns_name_options(mut self, input: crate::model::PrivateDnsNameOptionsRequest) -> Self {
            self.private_dns_name_options = Some(input);
            self
        }
        /// <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
        pub fn set_private_dns_name_options(mut self, input: std::option::Option<crate::model::PrivateDnsNameOptionsRequest>) -> Self {
            self.private_dns_name_options = input; self
        }
        /// <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> 
        /// <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn private_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
            self.private_ip_address = Some(input.into());
            self
        }
        /// <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> 
        /// <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> 
        /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
        pub fn set_private_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.private_ip_address = input; self
        }
        /// <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn ramdisk_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.ramdisk_id = Some(input.into());
            self
        }
        /// <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.</p> <important> 
        /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
        /// </important>
        pub fn set_ramdisk_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.ramdisk_id = input; self
        }
        /// Appends an item to `security_group_ids`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        ///
        /// <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
        pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_group_ids.unwrap_or_default();
                            v.push(input.into());
                            self.security_group_ids = Some(v);
                            self
        }
        /// <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
        pub fn set_security_group_ids(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.security_group_ids = input; self
        }
        /// Appends an item to `security_groups`.
        ///
        /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
        ///
        /// <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> 
        /// <p>Default: Amazon EC2 uses the default security group.</p>
        pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_groups.unwrap_or_default();
                            v.push(input.into());
                            self.security_groups = Some(v);
                            self
        }
        /// <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> 
        /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> 
        /// <p>Default: Amazon EC2 uses the default security group.</p>
        pub fn set_security_groups(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.security_groups = input; self
        }
        /// <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> 
        /// <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
        pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.subnet_id = Some(input.into());
            self
        }
        /// <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> 
        /// <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
        pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.subnet_id = input; self
        }
        /// Appends an item to `tag_specifications`.
        ///
        /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
        ///
        /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
        pub fn tag_specifications(mut self, input: crate::model::TagSpecification) -> Self {
            let mut v = self.tag_specifications.unwrap_or_default();
                            v.push(input);
                            self.tag_specifications = Some(v);
                            self
        }
        /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
        pub fn set_tag_specifications(mut self, input: std::option::Option<std::vec::Vec<crate::model::TagSpecification>>) -> Self {
            self.tag_specifications = input; self
        }
        /// <p>The user data script to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
        pub fn user_data(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_data = Some(input.into());
            self
        }
        /// <p>The user data script to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
        pub fn set_user_data(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_data = input; self
        }
        /// Consumes the builder and constructs a [`RunInstancesInput`](crate::input::RunInstancesInput).
        pub fn build(self) -> Result<crate::input::RunInstancesInput, aws_smithy_http::operation::BuildError> {
            Ok(
                crate::input::RunInstancesInput {
                    additional_info: self.additional_info
                    ,
                    block_device_mappings: self.block_device_mappings
                    ,
                    capacity_reservation_specification: self.capacity_reservation_specification
                    ,
                    client_token: self.client_token
                    ,
                    cpu_options: self.cpu_options
                    ,
                    credit_specification: self.credit_specification
                    ,
                    disable_api_stop: self.disable_api_stop
                    ,
                    disable_api_termination: self.disable_api_termination
                    ,
                    dry_run: self.dry_run
                    ,
                    ebs_optimized: self.ebs_optimized
                    ,
                    elastic_gpu_specification: self.elastic_gpu_specification
                    ,
                    elastic_inference_accelerators: self.elastic_inference_accelerators
                    ,
                    enclave_options: self.enclave_options
                    ,
                    hibernation_options: self.hibernation_options
                    ,
                    iam_instance_profile: self.iam_instance_profile
                    ,
                    image_id: self.image_id
                    ,
                    instance_initiated_shutdown_behavior: self.instance_initiated_shutdown_behavior
                    ,
                    instance_market_options: self.instance_market_options
                    ,
                    instance_type: self.instance_type
                    ,
                    ipv6_address_count: self.ipv6_address_count
                    ,
                    ipv6_addresses: self.ipv6_addresses
                    ,
                    kernel_id: self.kernel_id
                    ,
                    key_name: self.key_name
                    ,
                    launch_template: self.launch_template
                    ,
                    license_specifications: self.license_specifications
                    ,
                    maintenance_options: self.maintenance_options
                    ,
                    max_count: self.max_count
                    ,
                    metadata_options: self.metadata_options
                    ,
                    min_count: self.min_count
                    ,
                    monitoring: self.monitoring
                    ,
                    network_interfaces: self.network_interfaces
                    ,
                    placement: self.placement
                    ,
                    private_dns_name_options: self.private_dns_name_options
                    ,
                    private_ip_address: self.private_ip_address
                    ,
                    ramdisk_id: self.ramdisk_id
                    ,
                    security_group_ids: self.security_group_ids
                    ,
                    security_groups: self.security_groups
                    ,
                    subnet_id: self.subnet_id
                    ,
                    tag_specifications: self.tag_specifications
                    ,
                    user_data: self.user_data
                    ,
                }
            )
        }
    }
    
    
}
#[doc(hidden)] pub type RunInstancesInputOperationOutputAlias = crate::operation::RunInstances;
            #[doc(hidden)] pub type RunInstancesInputOperationRetryAlias = aws_http::retry::AwsErrorRetryPolicy;
impl RunInstancesInput {
    /// Consumes the builder and constructs an Operation<[`RunInstances`](crate::operation::RunInstances)>
    #[allow(unused_mut)]#[allow(clippy::let_and_return)]#[allow(clippy::needless_borrow)]pub async fn make_operation(mut self, _config: &crate::config::Config) -> std::result::Result<aws_smithy_http::operation::Operation<crate::operation::RunInstances, aws_http::retry::AwsErrorRetryPolicy>, aws_smithy_http::operation::BuildError> {
        if self.client_token.is_none() {
                                self.client_token = Some(_config.make_token.make_idempotency_token());
                            }
        let mut request = {
            fn uri_base(_input: &crate::input::RunInstancesInput, output: &mut String) -> Result<(), aws_smithy_http::operation::BuildError> {
                write!(output, "/").expect("formatting should succeed");
                Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]fn update_http_builder(
                            input: &crate::input::RunInstancesInput,
                            builder: http::request::Builder
                        ) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
                let mut uri = String::new();
                uri_base(input, &mut uri)?;
                Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&self, http::request::Builder::new())?;
            builder = aws_smithy_http::header::set_request_header_if_absent(builder, http::header::CONTENT_TYPE, "application/x-www-form-urlencoded");
            builder
        };
        let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]let body = aws_smithy_http::body::SdkBody::from(
            crate::operation_ser::serialize_operation_crate_operation_run_instances(&self)?
        );
        if let Some(content_length) = body.content_length() {
                                request = aws_smithy_http::header::set_request_header_if_absent(request, http::header::CONTENT_LENGTH, content_length);
                            }
        let request = request.body(body).expect("should be valid request");
        let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        let mut user_agent = aws_http::user_agent::AwsUserAgent::new_from_environment(
                            aws_types::os_shim_internal::Env::real(),
                            crate::API_METADATA.clone(),
                        );
                        if let Some(app_name) = _config.app_name() {
                            user_agent = user_agent.with_app_name(app_name.clone());
                        }
                        request.properties_mut().insert(user_agent);
        let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
                            request.properties_mut().insert(aws_types::SigningService::from_static(_config.signing_service()));
        aws_endpoint::set_endpoint_resolver(&mut request.properties_mut(), _config.endpoint_resolver.clone());
        if let Some(region) = &_config.region {
                                request.properties_mut().insert(region.clone());
                            }
        aws_http::auth::set_provider(&mut request.properties_mut(), _config.credentials_provider.clone());
        let op = aws_smithy_http::operation::Operation::new(request, crate::operation::RunInstances::new())
                            .with_metadata(aws_smithy_http::operation::Metadata::new("RunInstances", "ec2"));
        let op = op.with_retry_policy(aws_http::retry::AwsErrorRetryPolicy::new());
        Ok(op)
    }
    /// Creates a new builder-style object to manufacture [`RunInstancesInput`](crate::input::RunInstancesInput).
    pub fn builder() -> crate::input::run_instances_input::Builder {
        crate::input::run_instances_input::Builder::default()
    }
}

/// See [`TerminateInstancesInput`](crate::input::TerminateInstancesInput).
pub mod terminate_instances_input {
    
    /// A builder for [`TerminateInstancesInput`](crate::input::TerminateInstancesInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug, )]
    pub struct Builder {
        pub(crate) dry_run: std::option::Option<bool>,
        pub(crate) instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.dry_run = Some(input);
            self
        }
        /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.dry_run = input; self
        }
        /// Appends an item to `instance_ids`.
        ///
        /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
        ///
        /// <p>The IDs of the instances.</p> 
        /// <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn instance_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.instance_ids.unwrap_or_default();
                            v.push(input.into());
                            self.instance_ids = Some(v);
                            self
        }
        /// <p>The IDs of the instances.</p> 
        /// <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
        pub fn set_instance_ids(mut self, input: std::option::Option<std::vec::Vec<std::string::String>>) -> Self {
            self.instance_ids = input; self
        }
        /// Consumes the builder and constructs a [`TerminateInstancesInput`](crate::input::TerminateInstancesInput).
        pub fn build(self) -> Result<crate::input::TerminateInstancesInput, aws_smithy_http::operation::BuildError> {
            Ok(
                crate::input::TerminateInstancesInput {
                    dry_run: self.dry_run
                    ,
                    instance_ids: self.instance_ids
                    ,
                }
            )
        }
    }
    
    
}
#[doc(hidden)] pub type TerminateInstancesInputOperationOutputAlias = crate::operation::TerminateInstances;
            #[doc(hidden)] pub type TerminateInstancesInputOperationRetryAlias = aws_http::retry::AwsErrorRetryPolicy;
impl TerminateInstancesInput {
    /// Consumes the builder and constructs an Operation<[`TerminateInstances`](crate::operation::TerminateInstances)>
    #[allow(unused_mut)]#[allow(clippy::let_and_return)]#[allow(clippy::needless_borrow)]pub async fn make_operation(&self, _config: &crate::config::Config) -> std::result::Result<aws_smithy_http::operation::Operation<crate::operation::TerminateInstances, aws_http::retry::AwsErrorRetryPolicy>, aws_smithy_http::operation::BuildError> {
        let mut request = {
            fn uri_base(_input: &crate::input::TerminateInstancesInput, output: &mut String) -> Result<(), aws_smithy_http::operation::BuildError> {
                write!(output, "/").expect("formatting should succeed");
                Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]fn update_http_builder(
                            input: &crate::input::TerminateInstancesInput,
                            builder: http::request::Builder
                        ) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
                let mut uri = String::new();
                uri_base(input, &mut uri)?;
                Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&self, http::request::Builder::new())?;
            builder = aws_smithy_http::header::set_request_header_if_absent(builder, http::header::CONTENT_TYPE, "application/x-www-form-urlencoded");
            builder
        };
        let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]let body = aws_smithy_http::body::SdkBody::from(
            crate::operation_ser::serialize_operation_crate_operation_terminate_instances(&self)?
        );
        if let Some(content_length) = body.content_length() {
                                request = aws_smithy_http::header::set_request_header_if_absent(request, http::header::CONTENT_LENGTH, content_length);
                            }
        let request = request.body(body).expect("should be valid request");
        let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        let mut user_agent = aws_http::user_agent::AwsUserAgent::new_from_environment(
                            aws_types::os_shim_internal::Env::real(),
                            crate::API_METADATA.clone(),
                        );
                        if let Some(app_name) = _config.app_name() {
                            user_agent = user_agent.with_app_name(app_name.clone());
                        }
                        request.properties_mut().insert(user_agent);
        let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
                            request.properties_mut().insert(aws_types::SigningService::from_static(_config.signing_service()));
        aws_endpoint::set_endpoint_resolver(&mut request.properties_mut(), _config.endpoint_resolver.clone());
        if let Some(region) = &_config.region {
                                request.properties_mut().insert(region.clone());
                            }
        aws_http::auth::set_provider(&mut request.properties_mut(), _config.credentials_provider.clone());
        let op = aws_smithy_http::operation::Operation::new(request, crate::operation::TerminateInstances::new())
                            .with_metadata(aws_smithy_http::operation::Metadata::new("TerminateInstances", "ec2"));
        let op = op.with_retry_policy(aws_http::retry::AwsErrorRetryPolicy::new());
        Ok(op)
    }
    /// Creates a new builder-style object to manufacture [`TerminateInstancesInput`](crate::input::TerminateInstancesInput).
    pub fn builder() -> crate::input::terminate_instances_input::Builder {
        crate::input::terminate_instances_input::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]#[derive(std::clone::Clone, std::cmp::PartialEq, )]
pub struct TerminateInstancesInput  {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: std::option::Option<bool>,
    /// <p>The IDs of the instances.</p> 
    /// <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
    pub instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TerminateInstancesInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The IDs of the instances.</p> 
    /// <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
    pub fn instance_ids(&self) -> std::option::Option<& [std::string::String]> {
        self.instance_ids.as_deref()
    }
}
impl  std::fmt::Debug for TerminateInstancesInput  {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateInstancesInput");
        formatter.field("dry_run", &self.dry_run);
        formatter.field("instance_ids", &self.instance_ids);
        formatter.finish()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]#[derive(std::clone::Clone, std::cmp::PartialEq, )]
pub struct CreateTagsInput  {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: std::option::Option<bool>,
    /// <p>The IDs of the resources, separated by spaces.</p> 
    /// <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    pub resources: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl CreateTagsInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The IDs of the resources, separated by spaces.</p> 
    /// <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    pub fn resources(&self) -> std::option::Option<& [std::string::String]> {
        self.resources.as_deref()
    }
    /// <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
    pub fn tags(&self) -> std::option::Option<& [crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl  std::fmt::Debug for CreateTagsInput  {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTagsInput");
        formatter.field("dry_run", &self.dry_run);
        formatter.field("resources", &self.resources);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]#[derive(std::clone::Clone, std::cmp::PartialEq, )]
pub struct RunInstancesInput  {
    /// <p>Reserved.</p>
    pub additional_info: std::option::Option<std::string::String>,
    /// <p>The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub block_device_mappings: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
    /// <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
    pub capacity_reservation_specification: std::option::Option<crate::model::CapacityReservationSpecification>,
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> 
    /// <p>Constraints: Maximum 64 ASCII characters</p>
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub cpu_options: std::option::Option<crate::model::CpuOptionsRequest>,
    /// <p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p> 
    /// <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is supported.</p>
    pub credit_specification: std::option::Option<crate::model::CreditSpecificationRequest>,
    /// <p>Indicates whether an instance is enabled for stop protection. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop Protection</a>. </p>
    pub disable_api_stop: std::option::Option<bool>,
    /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> 
    /// <p>Default: <code>false</code> </p>
    pub disable_api_termination: std::option::Option<bool>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: std::option::Option<bool>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> 
    /// <p>Default: <code>false</code> </p>
    pub ebs_optimized: std::option::Option<bool>,
    /// <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub elastic_gpu_specification: std::option::Option<std::vec::Vec<crate::model::ElasticGpuSpecification>>,
    /// <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p> 
    /// <p>You cannot specify accelerators from different generations in the same request.</p>
    pub elastic_inference_accelerators: std::option::Option<std::vec::Vec<crate::model::ElasticInferenceAccelerator>>,
    /// <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html"> What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p> 
    /// <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
    pub enclave_options: std::option::Option<crate::model::EnclaveOptionsRequest>,
    /// <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
    pub hibernation_options: std::option::Option<crate::model::HibernationOptionsRequest>,
    /// <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
    pub iam_instance_profile: std::option::Option<crate::model::IamInstanceProfileSpecification>,
    /// <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
    pub image_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> 
    /// <p>Default: <code>stop</code> </p>
    pub instance_initiated_shutdown_behavior: std::option::Option<crate::model::ShutdownBehavior>,
    /// <p>The market (purchasing) option for the instances.</p> 
    /// <p>For <code>RunInstances</code>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
    pub instance_market_options: std::option::Option<crate::model::InstanceMarketOptionsRequest>,
    /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// <p>Default: <code>m1.small</code> </p>
    pub instance_type: std::option::Option<crate::model::InstanceType>,
    /// <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> 
    /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub ipv6_address_count: std::option::Option<i32>,
    /// <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> 
    /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub ipv6_addresses: std::option::Option<std::vec::Vec<crate::model::InstanceIpv6Address>>,
    /// <p>The ID of the kernel.</p> <important> 
    /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// </important>
    pub kernel_id: std::option::Option<std::string::String>,
    /// <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> 
    /// <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> 
    /// </important>
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The launch template to use to launch the instances. Any parameters that you specify in <code>RunInstances</code> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
    pub launch_template: std::option::Option<crate::model::LaunchTemplateSpecification>,
    /// <p>The license configurations.</p>
    pub license_specifications: std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationRequest>>,
    /// <p>The maintenance and recovery options for the instance.</p>
    pub maintenance_options: std::option::Option<crate::model::InstanceMaintenanceOptionsRequest>,
    /// <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> 
    /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
    pub max_count: std::option::Option<i32>,
    /// <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
    pub metadata_options: std::option::Option<crate::model::InstanceMetadataOptionsRequest>,
    /// <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> 
    /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
    pub min_count: std::option::Option<i32>,
    /// <p>Specifies whether detailed monitoring is enabled for the instance.</p>
    pub monitoring: std::option::Option<crate::model::RunInstancesMonitoringEnabled>,
    /// <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</p>
    pub network_interfaces: std::option::Option<std::vec::Vec<crate::model::InstanceNetworkInterfaceSpecification>>,
    /// <p>The placement for the instance.</p>
    pub placement: std::option::Option<crate::model::Placement>,
    /// <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
    pub private_dns_name_options: std::option::Option<crate::model::PrivateDnsNameOptionsRequest>,
    /// <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> 
    /// <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> 
    /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub private_ip_address: std::option::Option<std::string::String>,
    /// <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.</p> <important> 
    /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// </important>
    pub ramdisk_id: std::option::Option<std::string::String>,
    /// <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> 
    /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> 
    /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> 
    /// <p>Default: Amazon EC2 uses the default security group.</p>
    pub security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> 
    /// <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
    pub tag_specifications: std::option::Option<std::vec::Vec<crate::model::TagSpecification>>,
    /// <p>The user data script to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
    pub user_data: std::option::Option<std::string::String>,
}
impl RunInstancesInput {
    /// <p>Reserved.</p>
    pub fn additional_info(&self) -> std::option::Option<& str> {
        self.additional_info.as_deref()
    }
    /// <p>The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn block_device_mappings(&self) -> std::option::Option<& [crate::model::BlockDeviceMapping]> {
        self.block_device_mappings.as_deref()
    }
    /// <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
    pub fn capacity_reservation_specification(&self) -> std::option::Option<& crate::model::CapacityReservationSpecification> {
        self.capacity_reservation_specification.as_ref()
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> 
    /// <p>Constraints: Maximum 64 ASCII characters</p>
    pub fn client_token(&self) -> std::option::Option<& str> {
        self.client_token.as_deref()
    }
    /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn cpu_options(&self) -> std::option::Option<& crate::model::CpuOptionsRequest> {
        self.cpu_options.as_ref()
    }
    /// <p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p> 
    /// <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is supported.</p>
    pub fn credit_specification(&self) -> std::option::Option<& crate::model::CreditSpecificationRequest> {
        self.credit_specification.as_ref()
    }
    /// <p>Indicates whether an instance is enabled for stop protection. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection">Stop Protection</a>. </p>
    pub fn disable_api_stop(&self) -> std::option::Option<bool> {
        self.disable_api_stop
    }
    /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> 
    /// <p>Default: <code>false</code> </p>
    pub fn disable_api_termination(&self) -> std::option::Option<bool> {
        self.disable_api_termination
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> 
    /// <p>Default: <code>false</code> </p>
    pub fn ebs_optimized(&self) -> std::option::Option<bool> {
        self.ebs_optimized
    }
    /// <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn elastic_gpu_specification(&self) -> std::option::Option<& [crate::model::ElasticGpuSpecification]> {
        self.elastic_gpu_specification.as_deref()
    }
    /// <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p> 
    /// <p>You cannot specify accelerators from different generations in the same request.</p>
    pub fn elastic_inference_accelerators(&self) -> std::option::Option<& [crate::model::ElasticInferenceAccelerator]> {
        self.elastic_inference_accelerators.as_deref()
    }
    /// <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html"> What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p> 
    /// <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
    pub fn enclave_options(&self) -> std::option::Option<& crate::model::EnclaveOptionsRequest> {
        self.enclave_options.as_ref()
    }
    /// <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
    pub fn hibernation_options(&self) -> std::option::Option<& crate::model::HibernationOptionsRequest> {
        self.hibernation_options.as_ref()
    }
    /// <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
    pub fn iam_instance_profile(&self) -> std::option::Option<& crate::model::IamInstanceProfileSpecification> {
        self.iam_instance_profile.as_ref()
    }
    /// <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
    pub fn image_id(&self) -> std::option::Option<& str> {
        self.image_id.as_deref()
    }
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> 
    /// <p>Default: <code>stop</code> </p>
    pub fn instance_initiated_shutdown_behavior(&self) -> std::option::Option<& crate::model::ShutdownBehavior> {
        self.instance_initiated_shutdown_behavior.as_ref()
    }
    /// <p>The market (purchasing) option for the instances.</p> 
    /// <p>For <code>RunInstances</code>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
    pub fn instance_market_options(&self) -> std::option::Option<& crate::model::InstanceMarketOptionsRequest> {
        self.instance_market_options.as_ref()
    }
    /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// <p>Default: <code>m1.small</code> </p>
    pub fn instance_type(&self) -> std::option::Option<& crate::model::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> 
    /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub fn ipv6_address_count(&self) -> std::option::Option<i32> {
        self.ipv6_address_count
    }
    /// <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> 
    /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub fn ipv6_addresses(&self) -> std::option::Option<& [crate::model::InstanceIpv6Address]> {
        self.ipv6_addresses.as_deref()
    }
    /// <p>The ID of the kernel.</p> <important> 
    /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// </important>
    pub fn kernel_id(&self) -> std::option::Option<& str> {
        self.kernel_id.as_deref()
    }
    /// <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> 
    /// <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> 
    /// </important>
    pub fn key_name(&self) -> std::option::Option<& str> {
        self.key_name.as_deref()
    }
    /// <p>The launch template to use to launch the instances. Any parameters that you specify in <code>RunInstances</code> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
    pub fn launch_template(&self) -> std::option::Option<& crate::model::LaunchTemplateSpecification> {
        self.launch_template.as_ref()
    }
    /// <p>The license configurations.</p>
    pub fn license_specifications(&self) -> std::option::Option<& [crate::model::LicenseConfigurationRequest]> {
        self.license_specifications.as_deref()
    }
    /// <p>The maintenance and recovery options for the instance.</p>
    pub fn maintenance_options(&self) -> std::option::Option<& crate::model::InstanceMaintenanceOptionsRequest> {
        self.maintenance_options.as_ref()
    }
    /// <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> 
    /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
    pub fn max_count(&self) -> std::option::Option<i32> {
        self.max_count
    }
    /// <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
    pub fn metadata_options(&self) -> std::option::Option<& crate::model::InstanceMetadataOptionsRequest> {
        self.metadata_options.as_ref()
    }
    /// <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> 
    /// <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
    pub fn min_count(&self) -> std::option::Option<i32> {
        self.min_count
    }
    /// <p>Specifies whether detailed monitoring is enabled for the instance.</p>
    pub fn monitoring(&self) -> std::option::Option<& crate::model::RunInstancesMonitoringEnabled> {
        self.monitoring.as_ref()
    }
    /// <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</p>
    pub fn network_interfaces(&self) -> std::option::Option<& [crate::model::InstanceNetworkInterfaceSpecification]> {
        self.network_interfaces.as_deref()
    }
    /// <p>The placement for the instance.</p>
    pub fn placement(&self) -> std::option::Option<& crate::model::Placement> {
        self.placement.as_ref()
    }
    /// <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
    pub fn private_dns_name_options(&self) -> std::option::Option<& crate::model::PrivateDnsNameOptionsRequest> {
        self.private_dns_name_options.as_ref()
    }
    /// <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> 
    /// <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> 
    /// <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub fn private_ip_address(&self) -> std::option::Option<& str> {
        self.private_ip_address.as_deref()
    }
    /// <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.</p> <important> 
    /// <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the <i>Amazon EC2 User Guide</i>.</p> 
    /// </important>
    pub fn ramdisk_id(&self) -> std::option::Option<& str> {
        self.ramdisk_id.as_deref()
    }
    /// <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> 
    /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
    pub fn security_group_ids(&self) -> std::option::Option<& [std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> 
    /// <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> 
    /// <p>Default: Amazon EC2 uses the default security group.</p>
    pub fn security_groups(&self) -> std::option::Option<& [std::string::String]> {
        self.security_groups.as_deref()
    }
    /// <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> 
    /// <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
    pub fn subnet_id(&self) -> std::option::Option<& str> {
        self.subnet_id.as_deref()
    }
    /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
    pub fn tag_specifications(&self) -> std::option::Option<& [crate::model::TagSpecification]> {
        self.tag_specifications.as_deref()
    }
    /// <p>The user data script to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
    pub fn user_data(&self) -> std::option::Option<& str> {
        self.user_data.as_deref()
    }
}
impl  std::fmt::Debug for RunInstancesInput  {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RunInstancesInput");
        formatter.field("additional_info", &self.additional_info);
        formatter.field("block_device_mappings", &self.block_device_mappings);
        formatter.field("capacity_reservation_specification", &self.capacity_reservation_specification);
        formatter.field("client_token", &self.client_token);
        formatter.field("cpu_options", &self.cpu_options);
        formatter.field("credit_specification", &self.credit_specification);
        formatter.field("disable_api_stop", &self.disable_api_stop);
        formatter.field("disable_api_termination", &self.disable_api_termination);
        formatter.field("dry_run", &self.dry_run);
        formatter.field("ebs_optimized", &self.ebs_optimized);
        formatter.field("elastic_gpu_specification", &self.elastic_gpu_specification);
        formatter.field("elastic_inference_accelerators", &self.elastic_inference_accelerators);
        formatter.field("enclave_options", &self.enclave_options);
        formatter.field("hibernation_options", &self.hibernation_options);
        formatter.field("iam_instance_profile", &self.iam_instance_profile);
        formatter.field("image_id", &self.image_id);
        formatter.field("instance_initiated_shutdown_behavior", &self.instance_initiated_shutdown_behavior);
        formatter.field("instance_market_options", &self.instance_market_options);
        formatter.field("instance_type", &self.instance_type);
        formatter.field("ipv6_address_count", &self.ipv6_address_count);
        formatter.field("ipv6_addresses", &self.ipv6_addresses);
        formatter.field("kernel_id", &self.kernel_id);
        formatter.field("key_name", &self.key_name);
        formatter.field("launch_template", &self.launch_template);
        formatter.field("license_specifications", &self.license_specifications);
        formatter.field("maintenance_options", &self.maintenance_options);
        formatter.field("max_count", &self.max_count);
        formatter.field("metadata_options", &self.metadata_options);
        formatter.field("min_count", &self.min_count);
        formatter.field("monitoring", &self.monitoring);
        formatter.field("network_interfaces", &self.network_interfaces);
        formatter.field("placement", &self.placement);
        formatter.field("private_dns_name_options", &self.private_dns_name_options);
        formatter.field("private_ip_address", &self.private_ip_address);
        formatter.field("ramdisk_id", &self.ramdisk_id);
        formatter.field("security_group_ids", &self.security_group_ids);
        formatter.field("security_groups", &self.security_groups);
        formatter.field("subnet_id", &self.subnet_id);
        formatter.field("tag_specifications", &self.tag_specifications);
        formatter.field("user_data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]#[derive(std::clone::Clone, std::cmp::PartialEq, )]
pub struct DescribeInstancesInput  {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: std::option::Option<bool>,
    /// <p>The filters.</p> 
    /// <ul> 
    /// <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> 
    /// <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> 
    /// <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> 
    /// <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> 
    /// <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> 
    /// <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> 
    /// <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
    /// <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> 
    /// <li> <p> <code>capacity-reservation-id</code> - The ID of the Capacity Reservation into which the instance was launched.</p> </li> 
    /// <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> 
    /// <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> 
    /// <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> 
    /// <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> 
    /// <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> 
    /// <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> 
    /// <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li> 
    /// <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> 
    /// <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> 
    /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> 
    /// <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> 
    /// <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> 
    /// <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> 
    /// <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> 
    /// <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> 
    /// <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> 
    /// <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> 
    /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> 
    /// <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> 
    /// <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> 
    /// <li> <p> <code>launch-time</code> - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an entire day.</p> </li> 
    /// <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> 
    /// <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> 
    /// <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> 
    /// <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> 
    /// <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> 
    /// <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> 
    /// <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
    /// <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> 
    /// <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by Amazon Web Services.</p> </li> 
    /// <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> 
    /// <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> 
    /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> 
    /// <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> 
    /// <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p> </li> 
    /// <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> 
    /// <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> 
    /// <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> 
    /// <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> 
    /// <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> 
    /// <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> 
    /// <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> 
    /// <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> 
    /// <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> 
    /// <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p> </li> 
    /// <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> 
    /// <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> 
    /// <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> 
    /// <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> 
    /// <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> 
    /// <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> 
    /// <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> 
    /// <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> 
    /// <li> <p> <code>tag:
    /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> 
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> 
    /// <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> 
    /// <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> 
    /// <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> 
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The instance IDs.</p> 
    /// <p>Default: Describes all your instances.</p>
    pub instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
    pub max_results: std::option::Option<i32>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeInstancesInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The filters.</p> 
    /// <ul> 
    /// <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> 
    /// <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> 
    /// <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> 
    /// <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> 
    /// <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> 
    /// <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> 
    /// <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
    /// <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> 
    /// <li> <p> <code>capacity-reservation-id</code> - The ID of the Capacity Reservation into which the instance was launched.</p> </li> 
    /// <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> 
    /// <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> 
    /// <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> 
    /// <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> 
    /// <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> 
    /// <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> 
    /// <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li> 
    /// <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> 
    /// <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> 
    /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> 
    /// <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> 
    /// <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> 
    /// <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> 
    /// <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> 
    /// <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> 
    /// <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> 
    /// <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> 
    /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> 
    /// <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> 
    /// <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> 
    /// <li> <p> <code>launch-time</code> - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an entire day.</p> </li> 
    /// <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> 
    /// <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> 
    /// <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> 
    /// <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> 
    /// <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> 
    /// <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> 
    /// <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> 
    /// <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> 
    /// <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> 
    /// <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> 
    /// <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by Amazon Web Services.</p> </li> 
    /// <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> 
    /// <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> 
    /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> 
    /// <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> 
    /// <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> 
    /// <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p> </li> 
    /// <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> 
    /// <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> 
    /// <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> 
    /// <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> 
    /// <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> 
    /// <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> 
    /// <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> 
    /// <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> 
    /// <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> 
    /// <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p> </li> 
    /// <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> 
    /// <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> 
    /// <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> 
    /// <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> 
    /// <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> 
    /// <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> 
    /// <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> 
    /// <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> 
    /// <li> <p> <code>tag:
    /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> 
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> 
    /// <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> 
    /// <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> 
    /// <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> 
    /// </ul>
    pub fn filters(&self) -> std::option::Option<& [crate::model::Filter]> {
        self.filters.as_deref()
    }
    /// <p>The instance IDs.</p> 
    /// <p>Default: Describes all your instances.</p>
    pub fn instance_ids(&self) -> std::option::Option<& [std::string::String]> {
        self.instance_ids.as_deref()
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<& str> {
        self.next_token.as_deref()
    }
}
impl  std::fmt::Debug for DescribeInstancesInput  {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstancesInput");
        formatter.field("dry_run", &self.dry_run);
        formatter.field("filters", &self.filters);
        formatter.field("instance_ids", &self.instance_ids);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

