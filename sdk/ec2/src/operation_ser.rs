// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_create_tags(input: &crate::input::CreateTagsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]let mut scope_3 = writer.prefix("ResourceId");
    if let Some(var_4) = &input.resources {
        let mut list_6 = scope_3.start_list(true, None);
        for item_5 in var_4 {
            #[allow(unused_mut)]let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]let mut scope_8 = writer.prefix("Tag");
    if let Some(var_9) = &input.tags {
        let mut list_11 = scope_8.start_list(true, Some("item"));
        for item_10 in var_9 {
            #[allow(unused_mut)]let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_12, item_10)?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(input: &crate::input::DescribeInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_13 = writer.prefix("DryRun");
    if let Some(var_14) = &input.dry_run {
        scope_13.boolean(*var_14);
    }
    #[allow(unused_mut)]let mut scope_15 = writer.prefix("Filter");
    if let Some(var_16) = &input.filters {
        let mut list_18 = scope_15.start_list(true, Some("Filter"));
        for item_17 in var_16 {
            #[allow(unused_mut)]let mut entry_19 = list_18.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_19, item_17)?;
        }
        list_18.finish();
    }
    #[allow(unused_mut)]let mut scope_20 = writer.prefix("InstanceId");
    if let Some(var_21) = &input.instance_ids {
        let mut list_23 = scope_20.start_list(true, Some("InstanceId"));
        for item_22 in var_21 {
            #[allow(unused_mut)]let mut entry_24 = list_23.entry();
            entry_24.string(item_22);
        }
        list_23.finish();
    }
    #[allow(unused_mut)]let mut scope_25 = writer.prefix("MaxResults");
    if let Some(var_26) = &input.max_results {
        scope_25.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_26).into()));
    }
    #[allow(unused_mut)]let mut scope_27 = writer.prefix("NextToken");
    if let Some(var_28) = &input.next_token {
        scope_27.string(var_28);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(input: &crate::input::RunInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_29 = writer.prefix("AdditionalInfo");
    if let Some(var_30) = &input.additional_info {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]let mut scope_31 = writer.prefix("BlockDeviceMapping");
    if let Some(var_32) = &input.block_device_mappings {
        let mut list_34 = scope_31.start_list(true, Some("BlockDeviceMapping"));
        for item_33 in var_32 {
            #[allow(unused_mut)]let mut entry_35 = list_34.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_35, item_33)?;
        }
        list_34.finish();
    }
    #[allow(unused_mut)]let mut scope_36 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_37) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(scope_36, var_37)?;
    }
    #[allow(unused_mut)]let mut scope_38 = writer.prefix("ClientToken");
    if let Some(var_39) = &input.client_token {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]let mut scope_40 = writer.prefix("CpuOptions");
    if let Some(var_41) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(scope_40, var_41)?;
    }
    #[allow(unused_mut)]let mut scope_42 = writer.prefix("CreditSpecification");
    if let Some(var_43) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(scope_42, var_43)?;
    }
    #[allow(unused_mut)]let mut scope_44 = writer.prefix("DisableApiStop");
    if let Some(var_45) = &input.disable_api_stop {
        scope_44.boolean(*var_45);
    }
    #[allow(unused_mut)]let mut scope_46 = writer.prefix("DisableApiTermination");
    if let Some(var_47) = &input.disable_api_termination {
        scope_46.boolean(*var_47);
    }
    #[allow(unused_mut)]let mut scope_48 = writer.prefix("DryRun");
    if let Some(var_49) = &input.dry_run {
        scope_48.boolean(*var_49);
    }
    #[allow(unused_mut)]let mut scope_50 = writer.prefix("EbsOptimized");
    if let Some(var_51) = &input.ebs_optimized {
        scope_50.boolean(*var_51);
    }
    #[allow(unused_mut)]let mut scope_52 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_53) = &input.elastic_gpu_specification {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(entry_56, item_54)?;
        }
        list_55.finish();
    }
    #[allow(unused_mut)]let mut scope_57 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_58) = &input.elastic_inference_accelerators {
        let mut list_60 = scope_57.start_list(true, Some("item"));
        for item_59 in var_58 {
            #[allow(unused_mut)]let mut entry_61 = list_60.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(entry_61, item_59)?;
        }
        list_60.finish();
    }
    #[allow(unused_mut)]let mut scope_62 = writer.prefix("EnclaveOptions");
    if let Some(var_63) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(scope_62, var_63)?;
    }
    #[allow(unused_mut)]let mut scope_64 = writer.prefix("HibernationOptions");
    if let Some(var_65) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(scope_64, var_65)?;
    }
    #[allow(unused_mut)]let mut scope_66 = writer.prefix("IamInstanceProfile");
    if let Some(var_67) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_66, var_67)?;
    }
    #[allow(unused_mut)]let mut scope_68 = writer.prefix("ImageId");
    if let Some(var_69) = &input.image_id {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]let mut scope_70 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_71) = &input.instance_initiated_shutdown_behavior {
        scope_70.string(var_71.as_str());
    }
    #[allow(unused_mut)]let mut scope_72 = writer.prefix("InstanceMarketOptions");
    if let Some(var_73) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(scope_72, var_73)?;
    }
    #[allow(unused_mut)]let mut scope_74 = writer.prefix("InstanceType");
    if let Some(var_75) = &input.instance_type {
        scope_74.string(var_75.as_str());
    }
    #[allow(unused_mut)]let mut scope_76 = writer.prefix("Ipv6AddressCount");
    if let Some(var_77) = &input.ipv6_address_count {
        scope_76.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_77).into()));
    }
    #[allow(unused_mut)]let mut scope_78 = writer.prefix("Ipv6Address");
    if let Some(var_79) = &input.ipv6_addresses {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]let mut scope_83 = writer.prefix("KernelId");
    if let Some(var_84) = &input.kernel_id {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]let mut scope_85 = writer.prefix("KeyName");
    if let Some(var_86) = &input.key_name {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]let mut scope_87 = writer.prefix("LaunchTemplate");
    if let Some(var_88) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(scope_87, var_88)?;
    }
    #[allow(unused_mut)]let mut scope_89 = writer.prefix("LicenseSpecification");
    if let Some(var_90) = &input.license_specifications {
        let mut list_92 = scope_89.start_list(true, Some("item"));
        for item_91 in var_90 {
            #[allow(unused_mut)]let mut entry_93 = list_92.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(entry_93, item_91)?;
        }
        list_92.finish();
    }
    #[allow(unused_mut)]let mut scope_94 = writer.prefix("MaintenanceOptions");
    if let Some(var_95) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(scope_94, var_95)?;
    }
    #[allow(unused_mut)]let mut scope_96 = writer.prefix("MaxCount");
    if let Some(var_97) = &input.max_count {
        scope_96.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_97).into()));
    }
    #[allow(unused_mut)]let mut scope_98 = writer.prefix("MetadataOptions");
    if let Some(var_99) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(scope_98, var_99)?;
    }
    #[allow(unused_mut)]let mut scope_100 = writer.prefix("MinCount");
    if let Some(var_101) = &input.min_count {
        scope_100.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_101).into()));
    }
    #[allow(unused_mut)]let mut scope_102 = writer.prefix("Monitoring");
    if let Some(var_103) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(scope_102, var_103)?;
    }
    #[allow(unused_mut)]let mut scope_104 = writer.prefix("NetworkInterface");
    if let Some(var_105) = &input.network_interfaces {
        let mut list_107 = scope_104.start_list(true, Some("item"));
        for item_106 in var_105 {
            #[allow(unused_mut)]let mut entry_108 = list_107.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_108, item_106)?;
        }
        list_107.finish();
    }
    #[allow(unused_mut)]let mut scope_109 = writer.prefix("Placement");
    if let Some(var_110) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_109, var_110)?;
    }
    #[allow(unused_mut)]let mut scope_111 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_112) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(scope_111, var_112)?;
    }
    #[allow(unused_mut)]let mut scope_113 = writer.prefix("PrivateIpAddress");
    if let Some(var_114) = &input.private_ip_address {
        scope_113.string(var_114);
    }
    #[allow(unused_mut)]let mut scope_115 = writer.prefix("RamdiskId");
    if let Some(var_116) = &input.ramdisk_id {
        scope_115.string(var_116);
    }
    #[allow(unused_mut)]let mut scope_117 = writer.prefix("SecurityGroupId");
    if let Some(var_118) = &input.security_group_ids {
        let mut list_120 = scope_117.start_list(true, Some("SecurityGroupId"));
        for item_119 in var_118 {
            #[allow(unused_mut)]let mut entry_121 = list_120.entry();
            entry_121.string(item_119);
        }
        list_120.finish();
    }
    #[allow(unused_mut)]let mut scope_122 = writer.prefix("SecurityGroup");
    if let Some(var_123) = &input.security_groups {
        let mut list_125 = scope_122.start_list(true, Some("SecurityGroup"));
        for item_124 in var_123 {
            #[allow(unused_mut)]let mut entry_126 = list_125.entry();
            entry_126.string(item_124);
        }
        list_125.finish();
    }
    #[allow(unused_mut)]let mut scope_127 = writer.prefix("SubnetId");
    if let Some(var_128) = &input.subnet_id {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]let mut scope_129 = writer.prefix("TagSpecification");
    if let Some(var_130) = &input.tag_specifications {
        let mut list_132 = scope_129.start_list(true, Some("item"));
        for item_131 in var_130 {
            #[allow(unused_mut)]let mut entry_133 = list_132.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_133, item_131)?;
        }
        list_132.finish();
    }
    #[allow(unused_mut)]let mut scope_134 = writer.prefix("UserData");
    if let Some(var_135) = &input.user_data {
        scope_134.string(var_135);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(input: &crate::input::TerminateInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_136 = writer.prefix("DryRun");
    if let Some(var_137) = &input.dry_run {
        scope_136.boolean(*var_137);
    }
    #[allow(unused_mut)]let mut scope_138 = writer.prefix("InstanceId");
    if let Some(var_139) = &input.instance_ids {
        let mut list_141 = scope_138.start_list(true, Some("InstanceId"));
        for item_140 in var_139 {
            #[allow(unused_mut)]let mut entry_142 = list_141.entry();
            entry_142.string(item_140);
        }
        list_141.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

