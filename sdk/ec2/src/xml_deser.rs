// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_http_generic_error(response: &http::Response<bytes::Bytes>) -> Result<aws_smithy_types::Error, aws_smithy_xml::decode::XmlError> {
    crate::ec2_query_errors::parse_generic_error(response.body().as_ref())
}

#[allow(unused_mut)]pub fn deser_operation_crate_operation_describe_instances(inp: &[u8], mut builder: crate::output::describe_instances_output::Builder) -> Result<crate::output::describe_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstancesResponse")) {
                        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected DescribeInstancesResponse got {:?}", start_el)))
                    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInstancesOutput$NextToken */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_1);
            }
            ,
            s if s.matches("reservationSet") /* Reservations com.amazonaws.ec2.synthetic#DescribeInstancesOutput$Reservations */ =>  {
                let var_2 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reservation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reservations(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]pub fn deser_operation_crate_operation_run_instances(inp: &[u8], mut builder: crate::output::run_instances_output::Builder) -> Result<crate::output::run_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        let start_el = decoder.start_el();
    if !(start_el.matches("RunInstancesResponse")) {
                        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected RunInstancesResponse got {:?}", start_el)))
                    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2.synthetic#RunInstancesOutput$Groups */ =>  {
                let var_3 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_3);
            }
            ,
            s if s.matches("instancesSet") /* Instances com.amazonaws.ec2.synthetic#RunInstancesOutput$Instances */ =>  {
                let var_4 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_4);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2.synthetic#RunInstancesOutput$OwnerId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_5);
            }
            ,
            s if s.matches("requesterId") /* RequesterId com.amazonaws.ec2.synthetic#RunInstancesOutput$RequesterId */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_requester_id(var_6);
            }
            ,
            s if s.matches("reservationId") /* ReservationId com.amazonaws.ec2.synthetic#RunInstancesOutput$ReservationId */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_id(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]pub fn deser_operation_crate_operation_terminate_instances(inp: &[u8], mut builder: crate::output::terminate_instances_output::Builder) -> Result<crate::output::terminate_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    
                        #[allow(unused_mut)]
                        let mut decoder = doc.root_element()?;
                        let start_el = decoder.start_el();
    if !(start_el.matches("TerminateInstancesResponse")) {
                        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected TerminateInstancesResponse got {:?}", start_el)))
                    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instancesSet") /* TerminatingInstances com.amazonaws.ec2.synthetic#TerminateInstancesOutput$TerminatingInstances */ =>  {
                let var_8 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_state_change_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_terminating_instances(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

pub fn deser_list_com_amazonaws_ec2_reservation_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::Reservation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reservation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_group_identifier_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::GroupIdentifier>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#GroupIdentifierList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_group_identifier(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::Instance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_state_change_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::InstanceStateChange>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceStateChangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_state_change(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_reservation(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::Reservation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::Reservation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#Reservation$Groups */ =>  {
                let var_9 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_9);
            }
            ,
            s if s.matches("instancesSet") /* Instances com.amazonaws.ec2#Reservation$Instances */ =>  {
                let var_10 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_10);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Reservation$OwnerId */ =>  {
                let var_11 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_11);
            }
            ,
            s if s.matches("requesterId") /* RequesterId com.amazonaws.ec2#Reservation$RequesterId */ =>  {
                let var_12 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_requester_id(var_12);
            }
            ,
            s if s.matches("reservationId") /* ReservationId com.amazonaws.ec2#Reservation$ReservationId */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_id(var_13);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_group_identifier(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::GroupIdentifier, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::GroupIdentifier::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#GroupIdentifier$GroupId */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_14);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#GroupIdentifier$GroupName */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_15);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::Instance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::Instance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("amiLaunchIndex") /* AmiLaunchIndex com.amazonaws.ec2#Instance$AmiLaunchIndex */ =>  {
                let var_16 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ami_launch_index(var_16);
            }
            ,
            s if s.matches("architecture") /* Architecture com.amazonaws.ec2#Instance$Architecture */ =>  {
                let var_17 =
                    Some(
                        Result::<crate::model::ArchitectureValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ArchitectureValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_architecture(var_17);
            }
            ,
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2#Instance$BlockDeviceMappings */ =>  {
                let var_18 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_18);
            }
            ,
            s if s.matches("bootMode") /* BootMode com.amazonaws.ec2#Instance$BootMode */ =>  {
                let var_19 =
                    Some(
                        Result::<crate::model::BootModeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BootModeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_boot_mode(var_19);
            }
            ,
            s if s.matches("capacityReservationId") /* CapacityReservationId com.amazonaws.ec2#Instance$CapacityReservationId */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_id(var_20);
            }
            ,
            s if s.matches("capacityReservationSpecification") /* CapacityReservationSpecification com.amazonaws.ec2#Instance$CapacityReservationSpecification */ =>  {
                let var_21 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_capacity_reservation_specification_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_specification(var_21);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2#Instance$ClientToken */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_22);
            }
            ,
            s if s.matches("cpuOptions") /* CpuOptions com.amazonaws.ec2#Instance$CpuOptions */ =>  {
                let var_23 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_cpu_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cpu_options(var_23);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2#Instance$EbsOptimized */ =>  {
                let var_24 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_24);
            }
            ,
            s if s.matches("elasticGpuAssociationSet") /* ElasticGpuAssociations com.amazonaws.ec2#Instance$ElasticGpuAssociations */ =>  {
                let var_25 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_elastic_gpu_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_associations(var_25);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationSet") /* ElasticInferenceAcceleratorAssociations com.amazonaws.ec2#Instance$ElasticInferenceAcceleratorAssociations */ =>  {
                let var_26 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_elastic_inference_accelerator_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_associations(var_26);
            }
            ,
            s if s.matches("enaSupport") /* EnaSupport com.amazonaws.ec2#Instance$EnaSupport */ =>  {
                let var_27 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ena_support(var_27);
            }
            ,
            s if s.matches("enclaveOptions") /* EnclaveOptions com.amazonaws.ec2#Instance$EnclaveOptions */ =>  {
                let var_28 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_enclave_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enclave_options(var_28);
            }
            ,
            s if s.matches("hibernationOptions") /* HibernationOptions com.amazonaws.ec2#Instance$HibernationOptions */ =>  {
                let var_29 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_hibernation_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hibernation_options(var_29);
            }
            ,
            s if s.matches("hypervisor") /* Hypervisor com.amazonaws.ec2#Instance$Hypervisor */ =>  {
                let var_30 =
                    Some(
                        Result::<crate::model::HypervisorType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HypervisorType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hypervisor(var_30);
            }
            ,
            s if s.matches("iamInstanceProfile") /* IamInstanceProfile com.amazonaws.ec2#Instance$IamInstanceProfile */ =>  {
                let var_31 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile(var_31);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#Instance$ImageId */ =>  {
                let var_32 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_32);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#Instance$InstanceId */ =>  {
                let var_33 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_33);
            }
            ,
            s if s.matches("instanceLifecycle") /* InstanceLifecycle com.amazonaws.ec2#Instance$InstanceLifecycle */ =>  {
                let var_34 =
                    Some(
                        Result::<crate::model::InstanceLifecycleType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceLifecycleType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_lifecycle(var_34);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#Instance$InstanceType */ =>  {
                let var_35 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_35);
            }
            ,
            s if s.matches("ipv6Address") /* Ipv6Address com.amazonaws.ec2#Instance$Ipv6Address */ =>  {
                let var_36 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_address(var_36);
            }
            ,
            s if s.matches("kernelId") /* KernelId com.amazonaws.ec2#Instance$KernelId */ =>  {
                let var_37 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_37);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2#Instance$KeyName */ =>  {
                let var_38 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_38);
            }
            ,
            s if s.matches("launchTime") /* LaunchTime com.amazonaws.ec2#Instance$LaunchTime */ =>  {
                let var_39 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_launch_time(var_39);
            }
            ,
            s if s.matches("licenseSet") /* Licenses com.amazonaws.ec2#Instance$Licenses */ =>  {
                let var_40 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_license_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_licenses(var_40);
            }
            ,
            s if s.matches("maintenanceOptions") /* MaintenanceOptions com.amazonaws.ec2#Instance$MaintenanceOptions */ =>  {
                let var_41 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_maintenance_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_maintenance_options(var_41);
            }
            ,
            s if s.matches("metadataOptions") /* MetadataOptions com.amazonaws.ec2#Instance$MetadataOptions */ =>  {
                let var_42 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_metadata_options_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metadata_options(var_42);
            }
            ,
            s if s.matches("monitoring") /* Monitoring com.amazonaws.ec2#Instance$Monitoring */ =>  {
                let var_43 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_monitoring(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_monitoring(var_43);
            }
            ,
            s if s.matches("networkInterfaceSet") /* NetworkInterfaces com.amazonaws.ec2#Instance$NetworkInterfaces */ =>  {
                let var_44 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_network_interface_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interfaces(var_44);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#Instance$OutpostArn */ =>  {
                let var_45 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_45);
            }
            ,
            s if s.matches("placement") /* Placement com.amazonaws.ec2#Instance$Placement */ =>  {
                let var_46 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_placement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement(var_46);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#Instance$Platform */ =>  {
                let var_47 =
                    Some(
                        Result::<crate::model::PlatformValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlatformValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_47);
            }
            ,
            s if s.matches("platformDetails") /* PlatformDetails com.amazonaws.ec2#Instance$PlatformDetails */ =>  {
                let var_48 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform_details(var_48);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#Instance$PrivateDnsName */ =>  {
                let var_49 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_49);
            }
            ,
            s if s.matches("privateDnsNameOptions") /* PrivateDnsNameOptions com.amazonaws.ec2#Instance$PrivateDnsNameOptions */ =>  {
                let var_50 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_private_dns_name_options_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_dns_name_options(var_50);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#Instance$PrivateIpAddress */ =>  {
                let var_51 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_51);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2#Instance$ProductCodes */ =>  {
                let var_52 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_52);
            }
            ,
            s if s.matches("dnsName") /* PublicDnsName com.amazonaws.ec2#Instance$PublicDnsName */ =>  {
                let var_53 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_dns_name(var_53);
            }
            ,
            s if s.matches("ipAddress") /* PublicIpAddress com.amazonaws.ec2#Instance$PublicIpAddress */ =>  {
                let var_54 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip_address(var_54);
            }
            ,
            s if s.matches("ramdiskId") /* RamdiskId com.amazonaws.ec2#Instance$RamdiskId */ =>  {
                let var_55 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_55);
            }
            ,
            s if s.matches("rootDeviceName") /* RootDeviceName com.amazonaws.ec2#Instance$RootDeviceName */ =>  {
                let var_56 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_root_device_name(var_56);
            }
            ,
            s if s.matches("rootDeviceType") /* RootDeviceType com.amazonaws.ec2#Instance$RootDeviceType */ =>  {
                let var_57 =
                    Some(
                        Result::<crate::model::DeviceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DeviceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_root_device_type(var_57);
            }
            ,
            s if s.matches("groupSet") /* SecurityGroups com.amazonaws.ec2#Instance$SecurityGroups */ =>  {
                let var_58 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_58);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2#Instance$SourceDestCheck */ =>  {
                let var_59 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_59);
            }
            ,
            s if s.matches("spotInstanceRequestId") /* SpotInstanceRequestId com.amazonaws.ec2#Instance$SpotInstanceRequestId */ =>  {
                let var_60 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_instance_request_id(var_60);
            }
            ,
            s if s.matches("sriovNetSupport") /* SriovNetSupport com.amazonaws.ec2#Instance$SriovNetSupport */ =>  {
                let var_61 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_sriov_net_support(var_61);
            }
            ,
            s if s.matches("instanceState") /* State com.amazonaws.ec2#Instance$State */ =>  {
                let var_62 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_state(var_62);
            }
            ,
            s if s.matches("stateReason") /* StateReason com.amazonaws.ec2#Instance$StateReason */ =>  {
                let var_63 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_state_reason(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_state_reason(var_63);
            }
            ,
            s if s.matches("reason") /* StateTransitionReason com.amazonaws.ec2#Instance$StateTransitionReason */ =>  {
                let var_64 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_64);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#Instance$SubnetId */ =>  {
                let var_65 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_65);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Instance$Tags */ =>  {
                let var_66 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_66);
            }
            ,
            s if s.matches("tpmSupport") /* TpmSupport com.amazonaws.ec2#Instance$TpmSupport */ =>  {
                let var_67 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_tpm_support(var_67);
            }
            ,
            s if s.matches("usageOperation") /* UsageOperation com.amazonaws.ec2#Instance$UsageOperation */ =>  {
                let var_68 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_usage_operation(var_68);
            }
            ,
            s if s.matches("usageOperationUpdateTime") /* UsageOperationUpdateTime com.amazonaws.ec2#Instance$UsageOperationUpdateTime */ =>  {
                let var_69 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_usage_operation_update_time(var_69);
            }
            ,
            s if s.matches("virtualizationType") /* VirtualizationType com.amazonaws.ec2#Instance$VirtualizationType */ =>  {
                let var_70 =
                    Some(
                        Result::<crate::model::VirtualizationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VirtualizationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_virtualization_type(var_70);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#Instance$VpcId */ =>  {
                let var_71 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_71);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_state_change(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceStateChange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceStateChange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currentState") /* CurrentState com.amazonaws.ec2#InstanceStateChange$CurrentState */ =>  {
                let var_72 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_current_state(var_72);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#InstanceStateChange$InstanceId */ =>  {
                let var_73 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_73);
            }
            ,
            s if s.matches("previousState") /* PreviousState com.amazonaws.ec2#InstanceStateChange$PreviousState */ =>  {
                let var_74 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_previous_state(var_74);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_list_com_amazonaws_ec2_instance_block_device_mapping_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceBlockDeviceMappingList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_block_device_mapping(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_capacity_reservation_specification_response(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::CapacityReservationSpecificationResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::CapacityReservationSpecificationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationPreference") /* CapacityReservationPreference com.amazonaws.ec2#CapacityReservationSpecificationResponse$CapacityReservationPreference */ =>  {
                let var_75 =
                    Some(
                        Result::<crate::model::CapacityReservationPreference, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationPreference::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_preference(var_75);
            }
            ,
            s if s.matches("capacityReservationTarget") /* CapacityReservationTarget com.amazonaws.ec2#CapacityReservationSpecificationResponse$CapacityReservationTarget */ =>  {
                let var_76 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_capacity_reservation_target_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_target(var_76);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_cpu_options(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::CpuOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::CpuOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("coreCount") /* CoreCount com.amazonaws.ec2#CpuOptions$CoreCount */ =>  {
                let var_77 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_core_count(var_77);
            }
            ,
            s if s.matches("threadsPerCore") /* ThreadsPerCore com.amazonaws.ec2#CpuOptions$ThreadsPerCore */ =>  {
                let var_78 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_threads_per_core(var_78);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_list_com_amazonaws_ec2_elastic_gpu_association_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::ElasticGpuAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ElasticGpuAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_elastic_gpu_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_elastic_inference_accelerator_association_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::ElasticInferenceAcceleratorAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ElasticInferenceAcceleratorAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_elastic_inference_accelerator_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_enclave_options(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::EnclaveOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::EnclaveOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#EnclaveOptions$Enabled */ =>  {
                let var_79 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_79);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_hibernation_options(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::HibernationOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::HibernationOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("configured") /* Configured com.amazonaws.ec2#HibernationOptions$Configured */ =>  {
                let var_80 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_configured(var_80);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_iam_instance_profile(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::IamInstanceProfile, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::IamInstanceProfile::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("arn") /* Arn com.amazonaws.ec2#IamInstanceProfile$Arn */ =>  {
                let var_81 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_81);
            }
            ,
            s if s.matches("id") /* Id com.amazonaws.ec2#IamInstanceProfile$Id */ =>  {
                let var_82 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_82);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_list_com_amazonaws_ec2_license_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::LicenseConfiguration>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LicenseList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_license_configuration(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_maintenance_options(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceMaintenanceOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceMaintenanceOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("autoRecovery") /* AutoRecovery com.amazonaws.ec2#InstanceMaintenanceOptions$AutoRecovery */ =>  {
                let var_83 =
                    Some(
                        Result::<crate::model::InstanceAutoRecoveryState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceAutoRecoveryState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_auto_recovery(var_83);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_metadata_options_response(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceMetadataOptionsResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceMetadataOptionsResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("httpEndpoint") /* HttpEndpoint com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpEndpoint */ =>  {
                let var_84 =
                    Some(
                        Result::<crate::model::InstanceMetadataEndpointState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataEndpointState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_endpoint(var_84);
            }
            ,
            s if s.matches("httpProtocolIpv6") /* HttpProtocolIpv6 com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpProtocolIpv6 */ =>  {
                let var_85 =
                    Some(
                        Result::<crate::model::InstanceMetadataProtocolState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataProtocolState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_protocol_ipv6(var_85);
            }
            ,
            s if s.matches("httpPutResponseHopLimit") /* HttpPutResponseHopLimit com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpPutResponseHopLimit */ =>  {
                let var_86 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_http_put_response_hop_limit(var_86);
            }
            ,
            s if s.matches("httpTokens") /* HttpTokens com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpTokens */ =>  {
                let var_87 =
                    Some(
                        Result::<crate::model::HttpTokensState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HttpTokensState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_tokens(var_87);
            }
            ,
            s if s.matches("instanceMetadataTags") /* InstanceMetadataTags com.amazonaws.ec2#InstanceMetadataOptionsResponse$InstanceMetadataTags */ =>  {
                let var_88 =
                    Some(
                        Result::<crate::model::InstanceMetadataTagsState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataTagsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_metadata_tags(var_88);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#InstanceMetadataOptionsResponse$State */ =>  {
                let var_89 =
                    Some(
                        Result::<crate::model::InstanceMetadataOptionsState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataOptionsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_89);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_monitoring(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::Monitoring, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::Monitoring::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#Monitoring$State */ =>  {
                let var_90 =
                    Some(
                        Result::<crate::model::MonitoringState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MonitoringState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_90);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_list_com_amazonaws_ec2_instance_network_interface_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::InstanceNetworkInterface>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceNetworkInterfaceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_network_interface(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_placement(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::Placement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::Placement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("affinity") /* Affinity com.amazonaws.ec2#Placement$Affinity */ =>  {
                let var_91 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_affinity(var_91);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#Placement$AvailabilityZone */ =>  {
                let var_92 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_92);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#Placement$GroupName */ =>  {
                let var_93 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_93);
            }
            ,
            s if s.matches("hostId") /* HostId com.amazonaws.ec2#Placement$HostId */ =>  {
                let var_94 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_id(var_94);
            }
            ,
            s if s.matches("hostResourceGroupArn") /* HostResourceGroupArn com.amazonaws.ec2#Placement$HostResourceGroupArn */ =>  {
                let var_95 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_resource_group_arn(var_95);
            }
            ,
            s if s.matches("partitionNumber") /* PartitionNumber com.amazonaws.ec2#Placement$PartitionNumber */ =>  {
                let var_96 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_partition_number(var_96);
            }
            ,
            s if s.matches("spreadDomain") /* SpreadDomain com.amazonaws.ec2#Placement$SpreadDomain */ =>  {
                let var_97 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spread_domain(var_97);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2#Placement$Tenancy */ =>  {
                let var_98 =
                    Some(
                        Result::<crate::model::Tenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_98);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_private_dns_name_options_response(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::PrivateDnsNameOptionsResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::PrivateDnsNameOptionsResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enableResourceNameDnsAAAARecord") /* EnableResourceNameDnsAAAARecord com.amazonaws.ec2#PrivateDnsNameOptionsResponse$EnableResourceNameDnsAAAARecord */ =>  {
                let var_99 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_aaaa_record(var_99);
            }
            ,
            s if s.matches("enableResourceNameDnsARecord") /* EnableResourceNameDnsARecord com.amazonaws.ec2#PrivateDnsNameOptionsResponse$EnableResourceNameDnsARecord */ =>  {
                let var_100 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_a_record(var_100);
            }
            ,
            s if s.matches("hostnameType") /* HostnameType com.amazonaws.ec2#PrivateDnsNameOptionsResponse$HostnameType */ =>  {
                let var_101 =
                    Some(
                        Result::<crate::model::HostnameType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HostnameType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hostname_type(var_101);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_list_com_amazonaws_ec2_product_code_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::ProductCode>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ProductCodeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_product_code(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_state(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceState, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#InstanceState$Code */ =>  {
                let var_102 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_code(var_102);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#InstanceState$Name */ =>  {
                let var_103 =
                    Some(
                        Result::<crate::model::InstanceStateName, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceStateName::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_103);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_state_reason(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::StateReason, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::StateReason::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#StateReason$Code */ =>  {
                let var_104 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_104);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#StateReason$Message */ =>  {
                let var_105 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_105);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_list_com_amazonaws_ec2_tag_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TagList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_block_device_mapping(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceBlockDeviceMapping, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceBlockDeviceMapping::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deviceName") /* DeviceName com.amazonaws.ec2#InstanceBlockDeviceMapping$DeviceName */ =>  {
                let var_106 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_name(var_106);
            }
            ,
            s if s.matches("ebs") /* Ebs com.amazonaws.ec2#InstanceBlockDeviceMapping$Ebs */ =>  {
                let var_107 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ebs_instance_block_device(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs(var_107);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_capacity_reservation_target_response(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::CapacityReservationTargetResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::CapacityReservationTargetResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationId") /* CapacityReservationId com.amazonaws.ec2#CapacityReservationTargetResponse$CapacityReservationId */ =>  {
                let var_108 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_id(var_108);
            }
            ,
            s if s.matches("capacityReservationResourceGroupArn") /* CapacityReservationResourceGroupArn com.amazonaws.ec2#CapacityReservationTargetResponse$CapacityReservationResourceGroupArn */ =>  {
                let var_109 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_resource_group_arn(var_109);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_elastic_gpu_association(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::ElasticGpuAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::ElasticGpuAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("elasticGpuAssociationId") /* ElasticGpuAssociationId com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuAssociationId */ =>  {
                let var_110 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_association_id(var_110);
            }
            ,
            s if s.matches("elasticGpuAssociationState") /* ElasticGpuAssociationState com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuAssociationState */ =>  {
                let var_111 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_association_state(var_111);
            }
            ,
            s if s.matches("elasticGpuAssociationTime") /* ElasticGpuAssociationTime com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuAssociationTime */ =>  {
                let var_112 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_association_time(var_112);
            }
            ,
            s if s.matches("elasticGpuId") /* ElasticGpuId com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuId */ =>  {
                let var_113 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_id(var_113);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_elastic_inference_accelerator_association(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::ElasticInferenceAcceleratorAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::ElasticInferenceAcceleratorAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("elasticInferenceAcceleratorArn") /* ElasticInferenceAcceleratorArn com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorArn */ =>  {
                let var_114 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_arn(var_114);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationId") /* ElasticInferenceAcceleratorAssociationId com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorAssociationId */ =>  {
                let var_115 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_association_id(var_115);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationState") /* ElasticInferenceAcceleratorAssociationState com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorAssociationState */ =>  {
                let var_116 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_association_state(var_116);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationTime") /* ElasticInferenceAcceleratorAssociationTime com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorAssociationTime */ =>  {
                let var_117 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_association_time(var_117);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_license_configuration(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::LicenseConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::LicenseConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("licenseConfigurationArn") /* LicenseConfigurationArn com.amazonaws.ec2#LicenseConfiguration$LicenseConfigurationArn */ =>  {
                let var_118 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_configuration_arn(var_118);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_network_interface(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceNetworkInterface, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceNetworkInterface::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2#InstanceNetworkInterface$Association */ =>  {
                let var_119 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_network_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_119);
            }
            ,
            s if s.matches("attachment") /* Attachment com.amazonaws.ec2#InstanceNetworkInterface$Attachment */ =>  {
                let var_120 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_network_interface_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachment(var_120);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#InstanceNetworkInterface$Description */ =>  {
                let var_121 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_121);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#InstanceNetworkInterface$Groups */ =>  {
                let var_122 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_122);
            }
            ,
            s if s.matches("interfaceType") /* InterfaceType com.amazonaws.ec2#InstanceNetworkInterface$InterfaceType */ =>  {
                let var_123 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_type(var_123);
            }
            ,
            s if s.matches("ipv4PrefixSet") /* Ipv4Prefixes com.amazonaws.ec2#InstanceNetworkInterface$Ipv4Prefixes */ =>  {
                let var_124 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv4_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefixes(var_124);
            }
            ,
            s if s.matches("ipv6AddressesSet") /* Ipv6Addresses com.amazonaws.ec2#InstanceNetworkInterface$Ipv6Addresses */ =>  {
                let var_125 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv6_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_addresses(var_125);
            }
            ,
            s if s.matches("ipv6PrefixSet") /* Ipv6Prefixes com.amazonaws.ec2#InstanceNetworkInterface$Ipv6Prefixes */ =>  {
                let var_126 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv6_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefixes(var_126);
            }
            ,
            s if s.matches("macAddress") /* MacAddress com.amazonaws.ec2#InstanceNetworkInterface$MacAddress */ =>  {
                let var_127 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_mac_address(var_127);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#InstanceNetworkInterface$NetworkInterfaceId */ =>  {
                let var_128 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_128);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#InstanceNetworkInterface$OwnerId */ =>  {
                let var_129 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_129);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#InstanceNetworkInterface$PrivateDnsName */ =>  {
                let var_130 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_130);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#InstanceNetworkInterface$PrivateIpAddress */ =>  {
                let var_131 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_131);
            }
            ,
            s if s.matches("privateIpAddressesSet") /* PrivateIpAddresses com.amazonaws.ec2#InstanceNetworkInterface$PrivateIpAddresses */ =>  {
                let var_132 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_private_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_ip_addresses(var_132);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2#InstanceNetworkInterface$SourceDestCheck */ =>  {
                let var_133 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_133);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#InstanceNetworkInterface$Status */ =>  {
                let var_134 =
                    Some(
                        Result::<crate::model::NetworkInterfaceStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::NetworkInterfaceStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_134);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#InstanceNetworkInterface$SubnetId */ =>  {
                let var_135 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_135);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#InstanceNetworkInterface$VpcId */ =>  {
                let var_136 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_136);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_product_code(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::ProductCode, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::ProductCode::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("productCode") /* ProductCodeId com.amazonaws.ec2#ProductCode$ProductCodeId */ =>  {
                let var_137 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_product_code_id(var_137);
            }
            ,
            s if s.matches("type") /* ProductCodeType com.amazonaws.ec2#ProductCode$ProductCodeType */ =>  {
                let var_138 =
                    Some(
                        Result::<crate::model::ProductCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ProductCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_product_code_type(var_138);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_tag(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::Tag, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::Tag::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("key") /* Key com.amazonaws.ec2#Tag$Key */ =>  {
                let var_139 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_139);
            }
            ,
            s if s.matches("value") /* Value com.amazonaws.ec2#Tag$Value */ =>  {
                let var_140 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_140);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_ebs_instance_block_device(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::EbsInstanceBlockDevice, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::EbsInstanceBlockDevice::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2#EbsInstanceBlockDevice$AttachTime */ =>  {
                let var_141 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_141);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#EbsInstanceBlockDevice$DeleteOnTermination */ =>  {
                let var_142 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_142);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#EbsInstanceBlockDevice$Status */ =>  {
                let var_143 =
                    Some(
                        Result::<crate::model::AttachmentStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AttachmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_143);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#EbsInstanceBlockDevice$VolumeId */ =>  {
                let var_144 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_144);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_network_interface_association(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceNetworkInterfaceAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceNetworkInterfaceAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("carrierIp") /* CarrierIp com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$CarrierIp */ =>  {
                let var_145 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_carrier_ip(var_145);
            }
            ,
            s if s.matches("customerOwnedIp") /* CustomerOwnedIp com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$CustomerOwnedIp */ =>  {
                let var_146 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ip(var_146);
            }
            ,
            s if s.matches("ipOwnerId") /* IpOwnerId com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$IpOwnerId */ =>  {
                let var_147 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_owner_id(var_147);
            }
            ,
            s if s.matches("publicDnsName") /* PublicDnsName com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$PublicDnsName */ =>  {
                let var_148 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_dns_name(var_148);
            }
            ,
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$PublicIp */ =>  {
                let var_149 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_149);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_network_interface_attachment(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceNetworkInterfaceAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceNetworkInterfaceAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$AttachTime */ =>  {
                let var_150 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_150);
            }
            ,
            s if s.matches("attachmentId") /* AttachmentId com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$AttachmentId */ =>  {
                let var_151 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_attachment_id(var_151);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$DeleteOnTermination */ =>  {
                let var_152 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_152);
            }
            ,
            s if s.matches("deviceIndex") /* DeviceIndex com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$DeviceIndex */ =>  {
                let var_153 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_device_index(var_153);
            }
            ,
            s if s.matches("networkCardIndex") /* NetworkCardIndex com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$NetworkCardIndex */ =>  {
                let var_154 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_card_index(var_154);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$Status */ =>  {
                let var_155 =
                    Some(
                        Result::<crate::model::AttachmentStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AttachmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_155);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_list_com_amazonaws_ec2_instance_ipv4_prefix_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::InstanceIpv4Prefix>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIpv4PrefixList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_ipv4_prefix(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_ipv6_address_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::InstanceIpv6Address>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIpv6AddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_ipv6_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_ipv6_prefix_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::InstanceIpv6Prefix>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIpv6PrefixList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_ipv6_prefix(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_private_ip_address_list(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<std::vec::Vec<crate::model::InstancePrivateIpAddress>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstancePrivateIpAddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_private_ip_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_ipv4_prefix(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceIpv4Prefix, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceIpv4Prefix::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv4Prefix") /* Ipv4Prefix com.amazonaws.ec2#InstanceIpv4Prefix$Ipv4Prefix */ =>  {
                let var_156 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefix(var_156);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_ipv6_address(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceIpv6Address, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceIpv6Address::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Address") /* Ipv6Address com.amazonaws.ec2#InstanceIpv6Address$Ipv6Address */ =>  {
                let var_157 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_address(var_157);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_ipv6_prefix(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstanceIpv6Prefix, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstanceIpv6Prefix::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Prefix") /* Ipv6Prefix com.amazonaws.ec2#InstanceIpv6Prefix$Ipv6Prefix */ =>  {
                let var_158 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefix(var_158);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

pub fn deser_structure_crate_model_instance_private_ip_address(decoder: &mut aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::model::InstancePrivateIpAddress, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]let mut builder = crate::model::InstancePrivateIpAddress::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2#InstancePrivateIpAddress$Association */ =>  {
                let var_159 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_network_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_159);
            }
            ,
            s if s.matches("primary") /* Primary com.amazonaws.ec2#InstancePrivateIpAddress$Primary */ =>  {
                let var_160 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_primary(var_160);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#InstancePrivateIpAddress$PrivateDnsName */ =>  {
                let var_161 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_161);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#InstancePrivateIpAddress$PrivateIpAddress */ =>  {
                let var_162 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_162);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build()
    )
}

